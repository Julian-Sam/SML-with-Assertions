
fun lookup "bogus" = 10000
  | lookup s = 0

open String
val Conc: string ref = ref ""

%%

%eop EOF SEMICOLON

(* %pos declares the type of positions for terminals.
   Each symbol has an associated left and right position. *)


%pos int

%left SUB PLUS
%left TIMES INTDIV
%right CARAT


%term 
	  (* With Symbol Types *)	
	  ID of string | INT of int | PRINT | 

	  (* Arithmatic *)
	  PLUS | TIMES | INTDIV | SUB | REALDIV | CARAT | EOF | SEMICOLON

	  (* Parentheses and Comments *)
(*	  LCOMMENTPAREN | RCOMMENTPAREN | LPAREN | 
	  RPAREN | LBRACK | RBRACK | 
*)
	  (* Assignment and Comparison *)
(*	  UNEQUAL | EQUAL | VARASSIGN | GREATERTHAN | LESSTHAN |
	  GREATERTHANEQUAL | LESSTHANEQUAL |
*)
	  (* Misc. *)
(*    BAR | BANG | COLON | COLONGT | HASH | 
    ARROW | DARROW | SEMICOLON | COMPOSITION | EOF 
*)
    (* Identifiers *)
(*    IF | THEN | ELSE | NOT | OR | AND | ANDALSO | ORELSE | 
    LET | IN | END | VAL | FUN | FN | FUNCTOR | FUNSIG | 
    HANDLE | RAISE | EXCEPTION | CASE | OF | TRUE | FALSE |
    TYPE | DATATYPE | REF | SOME | NONE | AS | ABSTYPE |
    OPEN | WITH | WITHTYPE | WHILE | DO | WHERE | 
    SIG | STRUCT | SIGNATURE | STRUCTURE 
*)
%nonterm EXP of int | START of int option 

%name Sample

%subst PRINT for ID
%prefer PLUS TIMES INTDIV SUB
%keyword PRINT SEMICOLON

%noshift EOF
%value ID ("bogus")
%verbose
%%

(* the parser returns the value associated with the expression *)

  START : PRINT EXP (print (Int.toString EXP);
                     print "\n";
                     SOME EXP)
        | EXP (SOME EXP)
        | (NONE)

  EXP : INT             (Conc := !Conc ^ String.fromInt (INT))
      | ID              (lookup ID)

  		(* Arithmatic Parsing Actions *)
      | EXP PLUS EXP    (let val _ = Conc := !Conc ^ String.fromInt (EXP1) ^ " + " 
      								   ^ String.fromInt (EXP2)
                         in 1 end)

      | EXP TIMES EXP   (let val _ = Conc := !Conc ^ String.fromInt (EXP1) ^ " * " 
                         ^ String.fromInt (EXP2)
                         in 1 end)
      
      | EXP INTDIV EXP  (let val _ = Conc := !Conc ^ String.fromInt (EXP1) ^ " div " 
                         ^ String.fromInt (EXP2)
                         in 1 end)

      | EXP REALDIV EXP (let val _ = Conc := !Conc ^ String.fromInt (EXP1) ^ " \ " 
                         ^ String.fromInt (EXP2)
                         in 1 end)
      
      | EXP SUB EXP     (let val _ = Conc := !Conc ^ String.fromInt (EXP1) ^ " - " 
                         ^ String.fromInt (EXP2)
                         in 1 end)

      | EXP CARAT EXP   (let fun e (m,0) = 1
                                | e (m,l) = m*e(m,l-1)
                             val _ = Conc := !Conc ^ String.fromInt (e (EXP1, EXP2))
                         in 1 end)

      (* Parentheses and Comments Parsing Actions *)

(*      | LCOMMENTPAREN   ()

      | RCOMMENTPAREN   ()

      | LPAREN          ()

      | RPAREN          ()

      | LBRACK          ()

      | RBRACK          ()
*)
      (* Assignment and Comparison Parsing Actions *)

(*      | EXP UNEQUAL EXP (Conc := !Conc ^ String.fromInt (EXP1) ^ " <> " 
                                       ^ String.fromInt (EXP2))

      | EXP EQUAL EXP   (Conc := !Conc ^ String.fromInt (EXP1) ^ " = " 
                                       ^ String.fromInt (EXP2))

      | VARASSIGN       ()

      | EXP GREATERTHAN EXP  (Conc := !Conc ^ String.fromInt (EXP1) ^ " > " 
                                            ^ String.fromInt (EXP2))

      | EXP LESSTHAN EXP     (Conc := !Conc ^ String.fromInt (EXP1) ^ " < " 
                                            ^ String.fromInt (EXP2))

      | EXP GREATERTHANEQUAL EXP   (Conc := !Conc ^ String.fromInt (EXP1) ^ " >= " 
                                                  ^ String.fromInt (EXP2))

      | EXP LESSTHANEQUAL EXP      (Conc := !Conc ^ String.fromInt (EXP1) ^ " <= " 
                                                  ^ String.fromInt (EXP2))
*)
      (* Misc. Parsing Actions *)

(*      | BAR             ()

      | BANG            ()

      | COLON           ()

      | COLONGT         ()

      | HASH            ()

      | ARROW           ()

      | DARROW          ()

      | COMPOSITION     ()
*)
      (* Identifiers *)

(*      | IF EXP THEN EXP ELSE EXP (Conc := !Conc ^ 
                                  "if "         ^ String.fromInt (EXP1) ^ 
                                  " <> 0 then " ^ String.fromInt (EXP2) ^ 
                                  " else "      ^ String.fromInt (EXP3) ^ " ")

      | NOT EXP            (Conc := !Conc ^ " not " ^ String.fromInt (EXP1))

      | EXP ANDALSO EXP    (Conc := !Conc ^ String.fromInt (EXP1) ^ " andalso " 
                                          ^ String.fromInt (EXP2))

      | EXP ORELSE EXP     (Conc := !Conc ^ String.fromInt (EXP1) ^ " orelse " 
                                          ^ String.fromInt (EXP2))

      | LET EXP IN EXP END       (Conc := !Conc ^ 
                                  "let "        ^ String.fromInt (EXP1) ^ 
                                  " in "        ^ String.fromInt (EXP2) ^ 
                                  " end ")

      | VAL             ()

      | FUN             ()

      | FN              ()

      | FUNCTOR         ()

      | FUNSIG          ()

      | HANDLE          ()

      | RAISE EXP       ((Conc := !Conc ^ "raise " ^ String.fromInt (EXP1)))
      
      | EXCEPTION       ()

      | CASE            ()

      | OF              ()

      | TRUE            ()

      | FALSE           ()

      | TYPE            ()

      | DATATYPE        ()

      | REF             ()

      | SOME            ()

      | NONE            () 

      | AS              () 

      | ABSTYPE         ()

      | OPEN            ()

      | WITH            ()

      | WITHTYPE        ()

      | WHILE EXP DO EXP  (Conc := !Conc ^ "while " ^ String.fromInt (EXP1) 
                                         ^ " do " ^ String.fromInt (EXP2))

      | WHERE           ()

      | SIG             ()

      | STRUCT          ()

      | SIGNATURE       ()

      | STRUCTURE       ()
*)

(*      | IF EXP THEN EXP ELSE EXP 
      					(Conc := !Conc ^ 
					     "if " 	       ^ String.fromInt (EXP1) ^ 
				         "<> 0 then "  ^ String.fromInt (EXP2) ^ 
				         " else " 	   ^ String.fromInt (EXP3) ^ " ")
      | VAL 			(Conc := !Conc ^ "val ")
      | FUN 			(Conc := !Conc ^ "fun ")
      | FUN 			(Conc := !Conc ^ "fn ")

      | LESSTHANEQUAL
      | GREATERTHANEQUAL*)