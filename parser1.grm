open String
open Int
val Conc: string ref = ref ""
exception LabError
fun concatWith_(x, lis) = concatWith (x) (lis);

%%

%eop EOF

%pos int

%left SUB PLUS
%left TIMES INTDIV
%right CARAT


%term 
    INT of string | EOF | COMMA of string |  PLUS of string | TIMES of string 
    | INTDIV  of string | SUB of string | LPAREN of string | RPAREN of string 
    | REALDIV of string | CARAT of string | SEMICOLON of string 
    | LBRACK of string     | RBRACK of string | ARROW of string 
    | DARROW of string | BAR of string | COLON of string | BANG of string 
    | COLONGT of string | COMPOSITION of string | UNEQUAL of string 
    | EQUALOP of string | VARASSIGN of string | GREATERTHAN of string 
    | LESSTHAN of string | GREATERTHANEQUAL of string | LESSTHANEQUAL of string 
    | LET of string | IN of string | END of string | WHILE of string 
    | DO of string | IF of string | THEN of string | ELSE of string 
    | ORELSE of string | ANDALSO of string | HANDLE of string | RAISE of string
    | EXCEPTION of string | WORD of string | CHAR of string | STRING of string
    | REAL of string | ID_NAME of string | MOD of string | AND of string 
    | FN of string | VAL of string | CASE of string | OF of string 
    | WILD of string | HASH of string | LCURLY of string | RCURLY of string 
    | DOT of string | DCOLON of string | NIL of string | QUOTE_ID of string 
    | DQUOTE_ID of string | FUN of string | AT of string | TYPE of string 
    | DATATYPE of string | ABSTYPE of string | WITHTYPE of string | STRUCT of string 
    | AS of string | STRUCTURE of string | NONFIX of string | INFIX of string 
    | INFIXR of string | OPEN of string | LOCAL of string | WITH of string 
    | REF of string | WHERE of string | EQTYPE of string | SHARING of string


%nonterm START of string option 
       | ID of string | LONG_ID of string | CON of string 
       | EXP of string | EXP_LIST of string | EXP_SEQ of string
       | DEC of string | VALBIND of string | ID_LIST of string
       | MATCH of string | PAT of string | PAT_LIST of string
       | EXP_ROW of string | LAB of string | PROG of string
       | FUNBIND of string | FUNMATCH of string | TYP_ROW of string 
       | TYP of string | MULT_ID of string | VAR of string 
       | TYP_TUPLE of string | TYPBIND of string | PAT_ROW of string
       | STR of string | STRBIND_BASE of string | STRBIND of string
       | SIG of string | ID_CURRY of string | PAT_CURRY of string
       | LONG_ID_LIST of string | EXNBIND of string | DATBIND of string

%name Sample

%prefer PLUS TIMES INTDIV SUB

%noshift EOF
%verbose
%%

  START : PROG (SOME (PROG))
        | (NONE)
	
	PROG : EOF ("")
			 | DEC SEMICOLON PROG (DEC ^ ";\n" ^ PROG)
		   | EXP SEMICOLON PROG (EXP ^ ";\n" ^ PROG)

  CON : INT (INT) 
      | WORD (WORD)
      | REAL (REAL)
      | CHAR (CHAR)
      | STRING (STRING)

  ID_LIST : ID_NAME (ID_NAME)
  		  | ID_NAME COMMA ID_LIST (ID_NAME ^ ", " ^ ID_LIST)

  ID_CURRY : ID (ID)
           | ID ID_CURRY (ID ^ " " ^ ID_CURRY)

  ID : ID_NAME (ID_NAME)
     | UNEQUAL (UNEQUAL)
     | EQUALOP (EQUALOP)
     | VARASSIGN (VARASSIGN)
     | GREATERTHAN (GREATERTHAN)
     | LESSTHAN (LESSTHAN)
     | GREATERTHANEQUAL (GREATERTHANEQUAL)
     | LESSTHANEQUAL (LESSTHANEQUAL)
     | BAR (BAR)
     | COLON (COLON)
     | BANG (BANG)
     | PLUS (PLUS)
     | TIMES (TIMES) 
     | SUB (SUB) 
     | INTDIV (INTDIV) 
     | REALDIV (REALDIV) 
     | MOD (MOD)

  (* Stuff like 'a or ''a. (Generic Types) *)
  VAR : QUOTE_ID (QUOTE_ID)
      | DQUOTE_ID (DQUOTE_ID)

  (* Stuff that might be from a structure. Ex. String.maxSize *)
  LONG_ID : ID_NAME (ID_NAME)  
  			  | ID_NAME DOT LONG_ID (ID_NAME ^ "." ^ LONG_ID)

  LONG_ID_LIST : LONG_ID (LONG_ID)
               | LONG_ID LONG_ID_LIST (LONG_ID ^ " " ^ LONG_ID_LIST)

  LAB : ID (ID)
      | INT (if sub(INT, 0) = #"~" orelse sub(INT,0) = #"0" then 
            ((print "Error: Record Var cannot start with 0 or ~"); raise LabError)
            else INT)

  EXP_LIST : EXP (EXP)
           | EXP COMMA EXP_LIST (EXP ^ ", " ^ EXP_LIST)

  EXP_SEQ : EXP SEMICOLON EXP (EXP1 ^ ";\n " ^ EXP2)
          | EXP SEMICOLON EXP_SEQ (EXP ^ ";\n " ^ EXP_SEQ)

  EXP : CON (CON)

      | LONG_ID (LONG_ID)

      | EXP ID EXP  (concatWith_(" ", [EXP1, ID, EXP2]))

      (* We add EXP and EXPLIST for parenthesis, since diff meanings
        (Tuple or just an exp *)
      | LPAREN EXP RPAREN (concatWith_(" ", [LPAREN, EXP, RPAREN]))

      | LPAREN EXP_LIST RPAREN (concatWith_(" ", [LPAREN, EXP_LIST, RPAREN])) 

      | LCURLY EXP_ROW RCURLY (concatWith_(" ", [LCURLY, EXP_ROW, RCURLY]))

      | HASH LAB (HASH ^ LAB)

      (* However for lists, we do not do the same as paren*)
      | LBRACK RBRACK (LBRACK ^ RBRACK) 

      | NIL (NIL) 

      (* Both EXPs should be of a' list type, but let sml deal with this *)
      | EXP AT EXP (concatWith_(" ", [EXP1, AT, EXP2]))

      (* EXP2 should be of a' list type, but let sml deal with this *)
      | EXP DCOLON EXP (concatWith_(" ", [EXP1, DCOLON, EXP2])) 

      | LBRACK EXP_LIST RBRACK (concatWith_(" ", [LBRACK, EXP_LIST, RBRACK])) 
      
      | LPAREN EXP_SEQ RPAREN (concatWith_(" ", [LPAREN, EXP_SEQ, RPAREN]))

      | LET DEC IN EXP END (concatWith_(" ", [LET, DEC, IN, "\n", EXP, "\n"]) ^ END)

      | LET DEC IN EXP_SEQ END (concatWith_(" ", [LET, DEC, IN, "\n", EXP_SEQ, "\n"]) ^ END)

      | EXP COLON TYP (concatWith_(" ", [EXP, COLON, TYP]))

      | RAISE EXP (concatWith_(" ", [RAISE, EXP]))

      | EXP HANDLE MATCH (concatWith_(" ", [EXP, HANDLE, MATCH]))

      | EXP ANDALSO EXP (concatWith_(" ", [EXP1, ANDALSO, EXP2])) 

      | EXP ORELSE EXP (concatWith_(" ", [EXP1, ORELSE, EXP2])) 

      | IF EXP THEN EXP ELSE EXP (concatWith_(" ", [IF, EXP1, THEN, EXP2, ELSE, EXP3])) 

      | WHILE EXP DO EXP (concatWith_(" ", [WHILE, EXP1, DO, EXP2])) 

      | CASE EXP OF MATCH (concatWith_(" ", [CASE, EXP, "of\n", MATCH])) 

      | FN MATCH (concatWith_(" ", [FN, MATCH]))

      (* REFERENCE CELL GRAMMAR *)
      | REF EXP (REF ^ " " ^ EXP)

      | ID_NAME VARASSIGN EXP (ID_NAME ^ " " ^ VARASSIGN ^ " " ^ EXP)

      | BANG EXP (BANG ^ EXP)


  MATCH : PAT DARROW EXP (concatWith_(" ", [PAT, DARROW, EXP]))

        | PAT DARROW EXP BAR MATCH (concatWith_(" ", [PAT, DARROW, EXP, BAR, MATCH]))


  EXP_ROW : LAB EQUALOP EXP (LAB ^ " = " ^ EXP)

          | LAB EQUALOP EXP COMMA EXP_ROW (LAB ^ " = " ^ EXP ^ ", " ^ EXP_ROW)
 

  PAT : CON (CON)

    | WILD (WILD)

    | ID (ID)

    | LCURLY RCURLY (LCURLY ^ " " ^ RCURLY)

    | LCURLY PAT_ROW RCURLY (LCURLY ^ " " ^ PAT_ROW ^ " " ^ RCURLY)

    | PAT ID_NAME PAT (concatWith_(" ", [PAT1, ID_NAME, PAT2]))

    | LPAREN PAT RPAREN (concatWith_(" ", [LPAREN, PAT1, RPAREN]))

    | LPAREN PAT_LIST RPAREN (concatWith_(" ", [LPAREN, PAT_LIST, RPAREN]))

    | LBRACK PAT_LIST RBRACK (concatWith_(" ", [LBRACK, PAT_LIST, RBRACK]))

    | PAT COLON TYP (concatWith_(" ", [PAT1, COLON, TYP]))

    | ID AS PAT (concatWith_(" ", [ID, AS, PAT1]))

    | ID COLON TYP AS PAT (concatWith_(" ", [ID, COLON, TYP, AS, PAT1]))


  PAT_ROW : LAB EQUALOP PAT (LAB ^ " = " ^ PAT)

          | LAB EQUALOP PAT COMMA PAT_ROW (LAB ^ " = " ^ PAT ^ ", " ^ PAT_ROW)

          | ID (ID)

          | ID AS PAT  (concatWith_(" ", [ID, AS, PAT]))

          | ID COLON TYP  (concatWith_(" ", [ID, COLON, TYP]))

          | ID COMMA PAT_ROW (concatWith_(" ", [ID, COMMA, PAT_ROW]))

          | ID COLON TYP AS PAT (concatWith_(" ", [ID, COLON, TYP, AS, PAT]))

          | ID AS PAT COMMA PAT_ROW (concatWith_(" ", [ID, AS, PAT, COMMA, PAT_ROW]))

          | ID COLON TYP COMMA PAT_ROW (concatWith_(" ", [ID, COLON, TYP, COMMA, PAT_ROW]))

          | ID COLON TYP AS PAT COMMA PAT_ROW (concatWith_(" ", [ID, COLON, TYP, AS, PAT, COMMA, PAT_ROW]))
 

  PAT_LIST : PAT (PAT)
 		       | PAT COMMA PAT_LIST (PAT ^ ", " ^ PAT_LIST)
  		
  PAT_CURRY : PAT (PAT)
            | PAT PAT_CURRY (PAT ^ " " ^ PAT_CURRY)

  TYP_TUPLE : TYP TIMES TYP (concatWith_(" ", [TYP1, TIMES, TYP2]))
            | TYP TIMES TYP_TUPLE (concatWith_(" ", [TYP, TIMES, TYP_TUPLE]))

  (* Space seperated names for types. For example: 'a list list *)
  MULT_ID : LONG_ID (LONG_ID)
            | LONG_ID MULT_ID (LONG_ID ^ " " ^ MULT_ID)

  TYP : VAR MULT_ID (VAR ^ " " ^ MULT_ID)
      | MULT_ID (MULT_ID)

      (* TYPE CONSTRUCTOR GOES HERE (NOT SURE WHAT IT DOES) 
          ⟨typ⟩(,) longid constructor *)
  
      | LPAREN VAR RPAREN (LPAREN ^ VAR ^ RPAREN)
      | TYP ARROW TYP (concatWith_(" ", [TYP1, ARROW, TYP2]))
      | TYP_TUPLE (TYP_TUPLE)
      | LCURLY TYP_ROW RCURLY (concatWith_(" ", [LCURLY, TYP_ROW, RCURLY]))

  TYP_ROW : LAB COLON TYP (LAB ^ " : " ^ TYP)
          | LAB COLON TYP COMMA TYP_ROW (LAB ^ " : " ^ TYP ^ ", " ^ TYP_ROW)


  DEC : VAL VALBIND (VAL ^ " " ^ VALBIND)

      | FUN FUNBIND (FUN ^ " " ^ FUNBIND)

      | TYPE TYPBIND (TYPE ^ " " ^ TYPBIND)

(*
      | DATATYPE DATBIND (DATATYPE ^ " " ^ DATBIND)

      | DATATYPE DATBIND WITHTYPE TYPBIND (concatWith_(" ", [DATATYPE, DATBIND, WITHTYPE, TYPBIND]))
*)


  DEC : VAL VALBIND (VAL ^ " " ^ VALBIND)

      | FUN FUNBIND (FUN ^ " " ^ FUNBIND)

      | TYPE TYPBIND (TYPE ^ " " ^ TYPBIND)

      | DATATYPE DATBIND (DATATYPE ^ " " ^ DATBIND)

      | DATATYPE DATBIND WITHTYPE TYPBIND (concatWith_(" ", [DATATYPE, DATBIND, WITHTYPE, TYPBIND]))

      | DATATYPE ID EQUALOP DATATYPE LONG_ID (concatWith_(" ", [DATATYPE, ID, EQUALOP, DATATYPE, LONG_ID]))

      | ABSTYPE DATBIND WITH DEC END (concatWith_(" ", [ABSTYPE, DATBIND, WITH, DEC, END]))

      | ABSTYPE DATBIND WITHTYPE TYPBIND WITH DEC END (concatWith_(" ", [ABSTYPE, DATBIND, WITHTYPE, TYPBIND, WITH, DEC, END]))

      | EXCEPTION EXNBIND (concatWith_(" ", [EXCEPTION, EXNBIND]))

      (* SAMEER WHY IS THIS HERE, IS THIS EVEN A RULE? SAMIR U R BREAKING DA GRAMMAR*)
      | DEC DEC (DEC1 ^ "\n" ^ DEC2)

      | STRUCTURE STRBIND (STRUCTURE ^ " " ^ STRBIND)

      | DEC SEMICOLON DEC (concatWith_(" ", [DEC1, SEMICOLON, DEC2]))

      | LOCAL DEC IN DEC END (concatWith_(" ", [LOCAL, DEC1, IN, DEC2, END]))

      | OPEN LONG_ID_LIST (OPEN ^ " " ^ LONG_ID_LIST)

      | NONFIX ID_CURRY (NONFIX ^ " " ^ ID_CURRY)

      | INFIX ID_CURRY (INFIX ^ " " ^ ID_CURRY)

      | INFIX INT ID_CURRY (INFIX ^ " " ^ INT ^ " " ^ ID_CURRY)

      | INFIXR ID_CURRY (INFIXR ^ " " ^ ID_CURRY)

      | INFIXR INT ID_CURRY (INFIXR ^ " " ^ INT ^ " " ^ ID_CURRY)


  VALBIND : PAT EQUALOP EXP (concatWith_(" ", [PAT, EQUALOP, EXP]))

          | PAT EQUALOP EXP AND VALBIND (concatWith_(" ", [PAT, EQUALOP, EXP, " and ", VALBIND]))


  FUNBIND : FUNMATCH (FUNMATCH)

  		  | FUNMATCH AND FUNBIND (FUNMATCH ^ " and " ^ FUNBIND)


  FUNMATCH : ID PAT_CURRY EQUALOP EXP (concatWith_(" ", [ID, PAT_CURRY, EQUALOP, EXP]))

           | ID PAT_CURRY COLON TYP EQUALOP EXP (concatWith_(" ", [ID, PAT_CURRY, COLON, TYP, EQUALOP, EXP]))

           | ID PAT_CURRY EQUALOP EXP BAR FUNMATCH (concatWith_(" ", [ID, PAT_CURRY, EQUALOP, EXP, BAR, FUNMATCH]))

           | ID PAT_CURRY COLON TYP EQUALOP EXP BAR FUNMATCH (concatWith_(" ", [ID, PAT_CURRY, COLON, TYP, EQUALOP, EXP, BAR, FUNMATCH]))

           | ID PAT EQUALOP EXP BAR FUNMATCH (concatWith_(" ", [ID, PAT, EQUALOP, EXP]) ^ "\n  " ^ BAR ^ " " ^ FUNMATCH)

           | PAT ID PAT EQUALOP EXP (concatWith_(" ", [PAT1, ID, PAT2, EQUALOP, EXP]))

           | PAT ID PAT COLON TYP EQUALOP EXP  (concatWith_(" ", [PAT1, ID, PAT2, COLON, TYP, EQUALOP, EXP]))

           | PAT ID PAT EQUALOP EXP BAR FUNMATCH  (concatWith_(" ", [PAT1, ID, PAT2, EQUALOP, EXP, BAR, FUNMATCH]))

           | PAT ID PAT COLON TYP EQUALOP EXP BAR FUNMATCH (concatWith_(" ", [PAT1, ID, PAT2, COLON, TYP, EQUALOP, EXP, BAR, FUNMATCH]))


  TYPBIND : ID EQUALOP TYP (concatWith_(" ", [ID, EQUALOP, TYP]))

  		    | ID EQUALOP TYP AND TYPBIND (concatWith_(" ", [ID, EQUALOP, TYP, AND, TYPBIND]))

(*  DATBIND : ID EQUALOP CONBIND 

  		  | ID EQUALOP CONBIND AND DATBIND

  CONBIND : ID 

  		  | ID OF TYP 

  		  | ID BAR CONBIND

  		  | ID OF TYP BAR CONBIND

  EXNBIND : *)



  STR : LONG_ID (LONG_ID)
      | STRUCT DEC END (concatWith_("\n", [STRUCT, DEC, END]))
      | STR COLON SIG (concatWith_(" ", [STR, COLON, SIG]))
      | STR COLONGT SIG (concatWith_(" ", [STR, COLONGT, SIG]))
      | ID_NAME LPAREN STR RPAREN (concatWith_(" ", [ID_NAME, LPAREN, STR, RPAREN]))
      | ID_NAME LPAREN DEC RPAREN (concatWith_(" ", [ID_NAME, LPAREN, DEC, RPAREN]))
      | LET DEC IN STR END (concatWith_("\n", [LET, DEC, IN, STR, END]))

  STRBIND_BASE : ID_NAME EQUALOP STR (concatWith_(" ",[ID_NAME, EQUALOP, STR]))
               | ID_NAME COLON SIG EQUALOP STR (concatWith_(" ", [ID_NAME, COLON, SIG, EQUALOP, STR]))
               | ID_NAME COLONGT SIG EQUALOP STR (concatWith_(" ", [ID_NAME, COLONGT, SIG, EQUALOP, STR]))

  STRBIND : STRBIND_BASE (STRBIND_BASE)
          | STRBIND_BASE AND STRBIND (concatWith_(" ",[STRBIND_BASE, "\n", AND, "\n", STRBIND]))


  (* TODO: SIG*)
  SIG : ID_NAME (ID_NAME)
      | SIG SPEC END (SIG ^ "\n " ^ END)
      | SIG WHERE TYPE TYPREFIN (concatWith_(" ", [SIG, "\n", WHERE, TYPE, TYPE]))

  TYPREFIN: TODO;
  
  LONG_ID_EQUAL_LIST : LONG_ID EQUALOP LONG_ID (LONG_ID ^ " " ^ EQUALOP ^ " " ^ LONG_ID)
                     | LONG_ID EQUALOP LONG_ID_EQUAL_LIST (LONG_ID ^ " " ^ EQUALOP ^ " " ^ LONG_ID_EQUAL_LIST)

  SPEC : VAL VALDESC (VAL ^ " " ^ VALDESC)
       | TYPE TYPDESC (TYPE ^ " " ^ TYPDESC)
       | EQTYPE TYPDESC (EQTYPE ^ " " ^ TYPDESC)
       | TYPE TYPBIND (TYPE ^ " " ^ TYPBIND)
       | DATATYPE DATDESC (DATATYPE ^ " " ^ DATDESC)
       | DATATYPE ID_NAME EQUALOP DATATYPE LONG_ID (concatWith_(" ", [DATATYPE, ID_NAME, EQUALOP, DATATYPE, LONG_ID]))
       | EXCEPTION EXNDESC (EXCEPTION ^ " " ^ EXNDESC)
       | STRUCTURE STRDESC (STRUCTURE ^ " " ^ STRDESC)
       | SPEC SEMICOLON SPEC (SPEC ^ SEMICOLON ^ "\n" ^ SPEC)
       | SPEC SPEC (SPEC ^ " " ^ SPEC)
       | INCLUDE SIG (INCLUDE ^ " " ^ SIG)
       | SPEC SHARING TYPE LONG_ID_EQUAL_LIST (SPEC ^ " " ^ SHARING ^ " " ^ LONG_ID_EQUAL_LIST)

  VALDESC : ID COLON TYP (ID ^ COLON ^ " " ^ TYP)
          | ID COLON TYP AND TYPDESC (ID ^ COLON ^ " " ^ TYP ^ AND ^ " " ^ TYPDESC)

  TYPDESC : ID_NAME (ID_NAME)
          | VAR_ID_LIST ID_NAME (VAR_ID_LIST ^ " " ^ ID_NAME)
          | TYPDESC AND TYPDESC (TYPDESC ^ " " ^ AND ^ " " ^ TYPDESC)

  DATDESC : ID_NAME EQUALOP CONDESC (ID_NAME ^ " " ^ EQUALOP ^ " " ^ CONDESC)
          | VAR_ID_LIST ID_NAME EQUALOP CONDESC (VAR_ID_LIST ^ " " ^ ID_NAME ^ " " ^ EQUALOP ^ " " ^ CONDESC)
          | TYPDESC AND TYPDESC (TYPDESC ^ " " ^ AND ^ " " ^ TYPDESC)
  
  CONDESC_BASE : ID_NAME (ID_NAME)
               | ID_NAME OF TYP (ID_NAME ^ " " ^ OF ^ " " ^ TYP)

  CONDESC : CONDESC_BASE (EXNDESC_BASE)
          | CONDESC_BASE BAR EXNDESC  (EXNDESC_BASE ^ " " ^ BAR ^ " " ^ EXNDESC)


  EXNDESC_BASE : ID_NAME (ID_NAME)
               | ID_NAME OF TYP (ID_NAME ^ " " ^ OF ^ " " ^ TYP)

  EXNDESC : EXNDESC_BASE (EXNDESC_BASE)
          | EXNDESC_BASE AND EXNDESC  (EXNDESC_BASE ^ " " ^ AND ^ " " ^ EXNDESC)

  STRDESC : ID_NAME COLON SIG (ID_NAME ^ COLON ^ " " ^ SIG)
          | ID_NAME COLON SIG AND STRDESC (ID_NAME ^ COLON ^ " " ^ SIG ^ " " ^ AND ^ " " ^ STRDESC)