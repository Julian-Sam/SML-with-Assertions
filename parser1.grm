open String
open Int
exception LabError
fun concatWith_(x, lis) = concatWith (x) (lis);

%%

%eop EOF

%pos int

%term 
    INT of string | EOF | COMMA of string |  PLUS of string | TIMES of string 
    | INTDIV  of string | SUB of string | LPAREN of string | RPAREN of string 
    | REALDIV of string | CARAT of string | SEMICOLON of string 
    | LBRACK of string     | RBRACK of string | ARROW of string 
    | DARROW of string | BAR of string | COLON of string | BANG of string 
    | COLONGT of string | COMPOSITION of string | UNEQUAL of string 
    | EQUALOP of string | VARASSIGN of string | GREATERTHAN of string 
    | LESSTHAN of string | GREATERTHANEQUAL of string | LESSTHANEQUAL of string 
    | LET of string | IN of string | END of string | WHILE of string 
    | DO of string | IF of string | THEN of string | ELSE of string 
    | ORELSE of string | ANDALSO of string | HANDLE of string | RAISE of string
    | EXCEPTION of string | WORD of string | CHAR of string | STRING of string
    | REAL of string | ID of string | MOD of string | AND of string 
    | FN of string | VAL of string | CASE of string | OF of string 
    | WILD of string | HASH of string | LCURLY of string | RCURLY of string 
    | DOT of string | DCOLON of string | QUOTE_ID of string 
    | DQUOTE_ID of string | FUN of string | AT of string | TYPE of string 
    | DATATYPE of string | ABSTYPE of string | WITHTYPE of string | STRUCT of string 
    | AS of string | STRUCTURE of string | NONFIX of string | INFIX of string 
    | INFIXR of string | OPEN of string | LOCAL of string | WITH of string 
    | REF of string | WHERE of string | EQTYPE of string | SHARING of string
    | INCLUDE of string | SIGNATURE of string | SIG of string | OP of string


%nonterm START of string option 
       | LONG_ID of string | CON of string 
       | EXP of string | EXP_LIST of string | EXP_SEQ of string
       | DEC of string | VALBIND of string | ID_LIST of string
       | MATCH of string | PAT of string | PAT_LIST of string
       | EXP_ROW of string | LAB of string | PROG of string
       | FUNBIND of string | FUNMATCH of string | TYP_ROW of string 
       | TYP of string | MULT_ID of string | VAR_ID of string 
       | TYP_TUPLE of string | TYPBIND of string | PAT_ROW of string
       | STR of string | STRBIND_BASE of string | STRBIND of string
       | SIG_EXP of string | ID_CURRY of string | ATPAT_CURRY of string
       | LONG_ID_LIST of string | EXNBIND of string | DATBIND of string
       | ID_NAMES of string | EXNBIND_BASE of string | CONBIND of string
       | FUNMATCH_BASE of string | VAR_ID_LIST of string
       | DATBIND_BASE of string | TYPBIND_BASE of string 
       | TYPREFIN of string | LONG_ID_EQUAL_LIST of string 
       | SPEC of string | VALDESC of string | TYPDESC of string
       | DATDESC of string | CONDESC_BASE of string | CONDESC of string
       | EXNDESC_BASE of string | EXNDESC of string | STRDESC of string
       | SIGBIND of string | SPEC_BASE of string
       | ATPAT of string | PAT_TUPLE of string 

%name Sample

%noshift EOF
%verbose
%%

  START : PROG (SOME (PROG))
        | (NONE)
  
  PROG : EOF ("\n")
        | SEMICOLON PROG (SEMICOLON ^ "\n" ^ PROG)
        | DEC PROG (DEC ^ " " ^ PROG)
        | EXP PROG (EXP ^ " " ^ PROG)
        | SIGNATURE SIGBIND PROG (SIGNATURE ^ " " ^ SIGBIND ^ " " ^ PROG)
  
  CON : INT ((*print (" <int> ");*) INT) 
      | WORD ((*print (" <word> ");*) WORD)
      | REAL ((*print (" <real> ");*) REAL)
      | CHAR ((*print (" <char> ");*) CHAR)
      | STRING ((*print (" <str> ");*) STRING)

  ID_NAMES : ID (ID)
           | LPAREN ID_LIST RPAREN (LPAREN ^ " " ^ ID_LIST ^ " " ^ RPAREN)

  ID_LIST : ID (ID)
          | ID COMMA ID_LIST (ID ^ ", " ^ ID_LIST)

  ID_CURRY : ID (ID)
           | ID ID_CURRY (ID ^ " " ^ ID_CURRY)

  ID : ID_NAME (ID_NAME)
     | UNEQUAL (UNEQUAL)
     | EQUALOP (EQUALOP)
     | VARASSIGN (VARASSIGN)
     | GREATERTHAN (GREATERTHAN)
     | LESSTHAN (LESSTHAN)
     | GREATERTHANEQUAL (GREATERTHANEQUAL)
     | LESSTHANEQUAL (LESSTHANEQUAL)
     | COLON (COLON)
     | BANG (BANG)
     | PLUS (PLUS)
     | TIMES (TIMES) 
     | SUB (SUB) 
     | INTDIV (INTDIV) 
     | REALDIV (REALDIV) 
     | MOD (MOD)

(* Stuff like 'a or ''a. (Generic Types) *)
  VAR_ID : QUOTE_ID (QUOTE_ID)
         | DQUOTE_ID (DQUOTE_ID)

  VAR_ID_LIST : VAR_ID (VAR_ID)
          | VAR_ID COMMA VAR_ID_LIST (concatWith_(" ", [VAR_ID, ", ", VAR_ID_LIST]))
          | LPAREN VAR_ID_LIST RPAREN (concatWith_(" ", [LPAREN, VAR_ID_LIST, RPAREN]))

  (* Stuff that might be from a structure. Ex. String.maxSize *)
  LONG_ID : ID (ID)  

          | ID DOT LONG_ID (ID ^ "." ^ LONG_ID)

  LONG_ID_LIST : LONG_ID (LONG_ID)

               | LONG_ID LONG_ID_LIST (LONG_ID ^ " " ^ LONG_ID_LIST)

  LAB : ID (ID)

      | INT (if sub(INT, 0) = #"~" orelse sub(INT,0) = #"0" then 
            ((print "Error: Record Var cannot start with 0 or ~"); raise LabError)
            else INT)

  EXP_LIST : EXP (EXP)

           | EXP COMMA EXP_LIST (EXP ^ ", " ^ EXP_LIST)

  EXP_SEQ : EXP SEMICOLON EXP (EXP1 ^ ";\n " ^ EXP2)

          | EXP SEMICOLON EXP_SEQ (EXP ^ ";\n " ^ EXP_SEQ)

  EXP : CON (CON)

      | LONG_ID (print (" <long_id> "); LONG_ID)

      | EXP EXP (print (" <exp1 exp2> "); EXP1 ^ " " ^ EXP2)

      | EXP ID EXP  (print (" <exp id exp> "); concatWith_(" ", [EXP1, ID, EXP2]))

      | OP LONG_ID (print (" <op lg_id> "); OP ^ " " ^ LONG_ID)
      | EXP GREATERTHAN EXP  (EXP1 ^ " " ^ GREATERTHAN ^ " " ^ EXP2)
      | EXP LESSTHAN EXP  (EXP1 ^ " " ^ LESSTHAN ^ " " ^ EXP2)
      | EXP GREATERTHANEQUAL EXP  (EXP1 ^ " " ^ GREATERTHANEQUAL ^ " " ^ EXP2)
      | EXP LESSTHANEQUAL EXP  (EXP1 ^ " " ^ LESSTHANEQUAL ^ " " ^ EXP2)
      | EXP UNEQUAL EXP  (EXP1 ^ " " ^ UNEQUAL ^ " " ^ EXP2)
      | EXP EQUALOP EXP  (EXP1 ^ " " ^ EQUALOP ^ " " ^ EXP2)
      | EXP PLUS EXP  (EXP1 ^ " " ^ PLUS ^ " " ^ EXP2)
      | EXP TIMES EXP  (EXP1 ^ " " ^ TIMES ^ " " ^ EXP2) 
      | EXP SUB EXP  (EXP1 ^ " " ^ SUB ^ " " ^ EXP2) 
      | EXP INTDIV EXP  (EXP1 ^ " " ^ INTDIV ^ " " ^ EXP2) 
      | EXP REALDIV EXP  (EXP1 ^ " " ^ REALDIV ^ " " ^ EXP2) 
      | EXP MOD EXP  (EXP1 ^ " " ^ MOD ^ " " ^ EXP2)

      (* We add EXP and EXPLIST for parenthesis, since diff meanings
        (Tuple or just an exp *)
      | LPAREN EXP RPAREN (print (" <(exp)> "); concatWith_(" ", [LPAREN, EXP, RPAREN]))

      | LPAREN EXP_LIST RPAREN (print (" <(elist)> "); concatWith_(" ", [LPAREN, EXP_LIST, RPAREN])) 

      | LCURLY EXP_ROW RCURLY (print (" <{erow}> "); concatWith_(" ", [LCURLY, EXP_ROW, RCURLY]))

      | HASH LAB (print (" <#lab> "); HASH ^ LAB)

      (* However for lists, we do not do the same as paren*)
      | LBRACK RBRACK (print (" <[]> "); LBRACK ^ RBRACK) 

      (* Both EXPs should be of a' list type, but let sml deal with this *)
      | EXP AT EXP (print (" <exp1@exp2> "); concatWith_(" ", [EXP1, AT, EXP2]))

      (* EXP2 should be of a' list type, but let sml deal with this *)
      | EXP DCOLON EXP (print (" <exp1::exp2> "); concatWith_(" ", [EXP1, DCOLON, EXP2])) 

      | LBRACK EXP_LIST RBRACK (print (" <[elist]> "); concatWith_(" ", [LBRACK, EXP_LIST, RBRACK])) 
      
      | LPAREN EXP_SEQ RPAREN (print (" <(eseq)> "); concatWith_(" ", [LPAREN, EXP_SEQ, RPAREN]))

      | LET DEC IN EXP END (print (" <let dec in exp end> "); concatWith_(" ", [LET, DEC, IN, "\n", EXP, "\n"]) ^ END)

      | LET DEC IN EXP_SEQ END (print (" <let dec in eseq end> "); concatWith_(" ", [LET, DEC, IN, "\n", EXP_SEQ, "\n"]) ^ END)

      | EXP COLON TYP (print (" <exp : typ> "); concatWith_(" ", [EXP, COLON, TYP]))

      | RAISE EXP (print (" <raise exp> "); concatWith_(" ", [RAISE, EXP]))

      | EXP HANDLE MATCH (print (" <exp handle match> "); concatWith_(" ", [EXP, HANDLE, MATCH]))

      | EXP ANDALSO EXP (print (" <exp andalso exp> "); concatWith_(" ", [EXP1, ANDALSO, EXP2])) 

      | EXP ORELSE EXP (print (" <exp orelse exp> "); concatWith_(" ", [EXP1, ORELSE, EXP2])) 

      | IF EXP THEN EXP ELSE EXP (print (" <if then else> "); concatWith_(" ", [IF, EXP1, THEN, EXP2, ELSE, EXP3])) 

      | WHILE EXP DO EXP (print (" <while do> "); concatWith_(" ", [WHILE, EXP1, DO, EXP2])) 

      | CASE EXP OF MATCH (print (" <case of> "); concatWith_(" ", [CASE, EXP, "of\n", MATCH])) 

      | FN MATCH (print (" <fn> "); concatWith_(" ", [FN, MATCH]))

      (* REFERENCE CELL GRAMMAR *)
      | REF EXP (print (" <ref exp> "); REF ^ " " ^ EXP)

      | LONG_ID VARASSIGN EXP (LONG_ID ^ " " ^ VARASSIGN ^ " " ^ EXP)

      | BANG EXP (print (" <!exp> "); BANG ^ EXP)

  MATCH : PAT DARROW EXP (print (" <pat => exp> "); concatWith_(" ", [PAT, DARROW, EXP]))

        | PAT DARROW EXP BAR MATCH (print (" <pat => exp | match> "); concatWith_(" ", [PAT, DARROW, EXP, BAR, MATCH]))


  EXP_ROW : LAB EQUALOP EXP (LAB ^ " = " ^ EXP)

          | LAB EQUALOP EXP COMMA EXP_ROW (LAB ^ " = " ^ EXP ^ ", " ^ EXP_ROW)
 

  ATPAT : CON (print (" <con> "); CON)

        | WILD (print (" <_> "); WILD)

        | LONG_ID (LONG_ID)

        | OP LONG_ID (OP ^ " " ^ LONG_ID)

        | LCURLY RCURLY ("{}")

        | LPAREN RPAREN ("()")

        | LBRACK RBRACK ("[]")

        | LCURLY PAT_ROW RCURLY ("{ " ^ PAT_ROW ^ " }")

        | LPAREN PAT RPAREN (concatWith_(" ", [LPAREN, PAT, RPAREN]))

        | LPAREN PAT_TUPLE RPAREN (concatWith_(" ", [LPAREN, PAT_TUPLE, RPAREN]))

        | LBRACK PAT_LIST RBRACK (concatWith_(" ", [LBRACK, PAT_LIST, RBRACK]))


  PAT : ATPAT (ATPAT)

      | LONG_ID ATPAT (LONG_ID ^ " " ^ ATPAT)

      | OP LONG_ID ATPAT (OP ^ " " ^ LONG_ID ^ " " ^ ATPAT)

      | PAT ID PAT (PAT1 ^ " " ^ ID ^ " " ^ PAT2)

      | ID COLON TYP (concatWith_(" ", [ID, COLON, TYP]))

      | PAT COLON TYP (concatWith_(" ", [PAT, COLON, TYP]))
      
      | ID AS PAT (concatWith_(" ", [ID, AS, PAT1]))

      | ID COLON TYP AS PAT (concatWith_(" ", [ID, COLON, TYP, AS, PAT1]))


  PAT_ROW : LAB EQUALOP PAT (LAB ^ " = " ^ PAT)

          | LAB EQUALOP PAT COMMA PAT_ROW (LAB ^ " = " ^ PAT ^ ", " ^ PAT_ROW)

          | ID (ID)

          | ID AS PAT  (concatWith_(" ", [ID, AS, PAT]))

          | ID COLON TYP  (concatWith_(" ", [ID, COLON, TYP]))

          | ID COMMA PAT_ROW (concatWith_(" ", [ID, COMMA, PAT_ROW]))

          | ID COLON TYP AS PAT (concatWith_(" ", [ID, COLON, TYP, AS, PAT]))

          | ID AS PAT COMMA PAT_ROW (concatWith_(" ", [ID, AS, PAT, COMMA, PAT_ROW]))

          | ID COLON TYP COMMA PAT_ROW (concatWith_(" ", [ID, COLON, TYP, COMMA, PAT_ROW]))

          | ID COLON TYP AS PAT COMMA PAT_ROW (concatWith_(" ", [ID, COLON, TYP, AS, PAT, COMMA, PAT_ROW]))
 

  PAT_LIST : PAT (PAT)

           | PAT COMMA PAT_LIST (PAT ^ ", " ^ PAT_LIST)
      
  PAT_TUPLE : PAT COMMA PAT (PAT1 ^ ", " ^ PAT2)

            | PAT COMMA PAT_TUPLE (PAT ^ ", " ^ PAT_TUPLE)

  ATPAT_CURRY : ATPAT ((*print (" <atpcurry -> atpat> ");*) ATPAT)

              | ATPAT ATPAT_CURRY ((*print (" <atpcurry -> atpat pcurry> ");*) ATPAT ^ " " ^ ATPAT_CURRY)


  TYP_TUPLE : TYP TIMES TYP ((*print (" <typ * typ> ");*) concatWith_(" ", [TYP1, TIMES, TYP2]))

            | TYP TIMES TYP_TUPLE ((*print (" <typ * ty_tuple> ");*) concatWith_(" ", [TYP, TIMES, TYP_TUPLE]))


  (* Space seperated names for types. For example: 'a list list *)

  MULT_ID : LONG_ID (LONG_ID)

          | REF (REF)

          | REF MULT_ID (REF ^ " " ^ MULT_ID)

          | LONG_ID MULT_ID (LONG_ID ^ " " ^ MULT_ID)


  TYP : VAR_ID (VAR_ID)

      | VAR_ID MULT_ID (VAR_ID ^ " " ^ MULT_ID)

      | MULT_ID (MULT_ID)

      | LPAREN VAR_ID RPAREN (LPAREN ^ VAR_ID ^ RPAREN)
      
      | TYP ARROW TYP (concatWith_(" ", [TYP1, ARROW, TYP2]))
      
      | TYP_TUPLE (TYP_TUPLE)
      
      | LCURLY TYP_ROW RCURLY (concatWith_(" ", [LCURLY, TYP_ROW, RCURLY]))


  TYP_ROW : LAB COLON TYP (LAB ^ " : " ^ TYP)
         
          | LAB COLON TYP COMMA TYP_ROW (LAB ^ " : " ^ TYP ^ ", " ^ TYP_ROW)


  DEC : VAL VALBIND (VAL ^ " " ^ VALBIND)

      | FUN FUNBIND ((*print (" <fun fbind> ");*) FUN ^ " " ^ FUNBIND)

      | VAL VAR_ID_LIST VALBIND (VAL ^ " " ^ VAR_ID_LIST ^ " " ^ VALBIND)

      | FUN VAR_ID_LIST FUNBIND (FUN ^ " " ^ VAR_ID_LIST ^ " " ^ FUNBIND)

      | TYPE TYPBIND (TYPE ^ " " ^ TYPBIND)

      | DATATYPE DATBIND (DATATYPE ^ " " ^ DATBIND)

      | DATATYPE DATBIND WITHTYPE TYPBIND (concatWith_(" ", [DATATYPE, DATBIND, WITHTYPE, TYPBIND]))

      | DATATYPE ID EQUALOP DATATYPE LONG_ID (concatWith_(" ", [DATATYPE, ID, EQUALOP, DATATYPE, LONG_ID]))

      | ABSTYPE DATBIND WITH DEC END (concatWith_(" ", [ABSTYPE, DATBIND, WITH, DEC, END]))

      | ABSTYPE DATBIND WITHTYPE TYPBIND WITH DEC END (concatWith_(" ", [ABSTYPE, DATBIND, WITHTYPE, TYPBIND, WITH, DEC, END]))

      | EXCEPTION EXNBIND (concatWith_(" ", [EXCEPTION, EXNBIND]))

      | DEC DEC ((*print (" <dec1 dec2> ");*) DEC1 ^ "\n" ^ DEC2)

      | STRUCTURE STRBIND ((*print (" <struct stbind> ");*) STRUCTURE ^ " " ^ STRBIND)

      | DEC SEMICOLON ((*print (" <dec;> ");*) DEC ^ ";\n")

      | DEC SEMICOLON DEC ((*print (" <dec1; dec2> ");*) concatWith_(" ", [DEC1, ";\n", DEC2]))

      | LOCAL DEC IN DEC END ((*print (" <lcl dec in dec end> ");*) concatWith_(" ", [LOCAL, DEC1, IN, DEC2, END]))

      | OPEN LONG_ID_LIST ((*print (" <open lgidlist> ");*) OPEN ^ " " ^ LONG_ID_LIST)

      | NONFIX ID_CURRY ((*print (" <nonfix idcurry> ");*) NONFIX ^ " " ^ ID_CURRY)

      | INFIX ID_CURRY ((*print (" <infix idcurry> "); *)INFIX ^ " " ^ ID_CURRY)

      | INFIX INT ID_CURRY ((*print (" <infix int idcurry> ");*) INFIX ^ " " ^ INT ^ " " ^ ID_CURRY)

      | INFIXR ID_CURRY ((*print (" <infixr idcurry> ");*) INFIXR ^ " " ^ ID_CURRY)

      | INFIXR INT ID_CURRY ((*print (" <infixr int idcurry> ");*) INFIXR ^ " " ^ INT ^ " " ^ ID_CURRY)


  VALBIND : PAT EQUALOP EXP ((*print (" <pat = exp> ");*) concatWith_(" ", [PAT, EQUALOP, EXP]))

          | PAT EQUALOP EXP AND VALBIND ((*print (" <pat = exp and vbind> "); *)concatWith_(" ", [PAT, EQUALOP, EXP, " and ", VALBIND]))





  FUNBIND : FUNMATCH ((*print (" <fmatch> ");*) FUNMATCH)

          | FUNMATCH AND FUNBIND ((*print (" <fmatch and fbind> ");*) FUNMATCH ^ " and " ^ FUNBIND)

  (* Easier pattern matching for functions *)

  FUNMATCH_BASE : ID ATPAT_CURRY EQUALOP EXP (print (" <id pat = exp> "); concatWith_(" ", [ID, ATPAT_CURRY, EQUALOP, EXP]))

                | ID ATPAT_CURRY COLON TYP EQUALOP EXP ( print (" <if pat : typ = exp> "); concatWith_(" ", [ID, ATPAT_CURRY, COLON, TYP, EQUALOP, EXP]))
 
           (*| ID ATPAT_CURRY EQUALOP EXP BAR FUNMATCH (print (" <id pat = exp | fmatch> "); concatWith_(" ", [ID, ATPAT_CURRY, EQUALOP, EXP, "\n  " , BAR, FUNMATCH]))*)
 
           (*| ID ATPAT_CURRY COLON TYP EQUALOP EXP BAR FUNMATCH (print (" <if pat : typ = exp | fmatch> "); concatWith_(" ", [ID, ATPAT_CURRY, COLON, TYP, EQUALOP, EXP, "\n  ", BAR, FUNMATCH]))*)
 

  (* Infix function declarations *)              

               (* | PAT ID PAT EQUALOP EXP (concatWith_(" ", [PAT1, ID, PAT2, EQUALOP, EXP]))

                | PAT ID PAT COLON TYP EQUALOP EXP  (concatWith_(" ", [PAT1, ID, PAT2, COLON, TYP, EQUALOP, EXP]))
*)
  
  FUNMATCH : FUNMATCH_BASE (print (" <fmatchb> "); FUNMATCH_BASE)

           | FUNMATCH_BASE BAR FUNMATCH (print (" <| fmatchb> "); FUNMATCH_BASE ^ " " ^ BAR ^ " " ^ FUNMATCH)






  TYPBIND_BASE : ID EQUALOP TYP (concatWith_(" ", [ID, EQUALOP, TYP]))

               | ID EQUALOP TYP AND TYPBIND (concatWith_(" ", [ID, EQUALOP, TYP, AND, TYPBIND]))


  TYPBIND : TYPBIND_BASE (TYPBIND_BASE)

          | VAR_ID_LIST TYPBIND_BASE (VAR_ID_LIST ^ " " ^ TYPBIND_BASE)


  DATBIND_BASE : ID_NAMES EQUALOP CONBIND (ID_NAMES ^ " " ^ EQUALOP ^ " " ^ CONBIND)

               | ID_NAMES EQUALOP CONBIND AND DATBIND (concatWith_(" ", [ID_NAMES, EQUALOP, CONBIND, AND, DATBIND]))


  DATBIND : DATBIND_BASE (DATBIND_BASE)

          | VAR_ID_LIST DATBIND_BASE (VAR_ID_LIST ^ " " ^ DATBIND_BASE)


  CONBIND : ID (ID)

          | ID OF TYP (ID ^ " " ^ OF ^ " " ^ TYP)

          | ID BAR CONBIND (ID ^ " " ^ BAR ^ " " ^ CONBIND)

          | ID OF TYP BAR CONBIND (concatWith_(" ", [ID, OF, TYP, BAR, CONBIND]))


  EXNBIND_BASE : ID (ID)

               | ID OF TYP (ID ^ " " ^ OF ^ " " ^ TYP)

               | ID EQUALOP LONG_ID (ID ^ " " ^ EQUALOP ^ " " ^ LONG_ID)


  EXNBIND : EXNBIND_BASE (EXNBIND_BASE)

          | EXNBIND_BASE AND EXNBIND (EXNBIND_BASE ^ " " ^ AND ^ " " ^ EXNBIND)




  STR : LONG_ID (LONG_ID)

      | STRUCT DEC END (concatWith_("\n", [STRUCT, DEC, END]))
  
      | STR COLON SIG_EXP (concatWith_(" ", [STR, COLON, SIG_EXP]))
  
      | STR COLONGT SIG_EXP (concatWith_(" ", [STR, COLONGT, SIG_EXP]))
  
      | ID LPAREN STR RPAREN (concatWith_(" ", [ID, LPAREN, STR, RPAREN]))
  
      | ID LPAREN DEC RPAREN (concatWith_(" ", [ID, LPAREN, DEC, RPAREN]))
  
      | LET DEC IN STR END (concatWith_("\n", [LET, DEC, IN, STR, END]))


  STRBIND_BASE : ID EQUALOP STR (concatWith_(" ",[ID, EQUALOP, STR]))
  
               | ID COLON SIG_EXP EQUALOP STR (concatWith_(" ", [ID, COLON, SIG_EXP, EQUALOP, STR]))
  
               | ID COLONGT SIG_EXP EQUALOP STR (concatWith_(" ", [ID, COLONGT, SIG_EXP, EQUALOP, STR]))


  STRBIND : STRBIND_BASE (STRBIND_BASE)
  
          | STRBIND_BASE AND STRBIND (concatWith_(" ",[STRBIND_BASE, "\n", AND, "\n", STRBIND]))


  SIGBIND : ID EQUALOP SIG_EXP (ID ^ " " ^ EQUALOP ^ " " ^ SIG_EXP)
          | ID EQUALOP SIG_EXP AND SIGBIND (concatWith_(" ", [ID, EQUALOP, SIG_EXP, AND, SIGBIND]))

  SIG_EXP : ID (ID)
          | SIG SPEC END (SIG ^ "\n" ^ SPEC ^ "\n" ^ END)
          | SIG WHERE TYPE TYPREFIN (concatWith_(" ", [SIG, "\n", WHERE, TYPE, TYPREFIN]))

  TYPREFIN: ID_NAME (ID_NAME)
  
  LONG_ID_EQUAL_LIST : LONG_ID EQUALOP LONG_ID (LONG_ID ^ " " ^ EQUALOP ^ " " ^ LONG_ID)
                     | LONG_ID EQUALOP LONG_ID_EQUAL_LIST (LONG_ID ^ " " ^ EQUALOP ^ " " ^ LONG_ID_EQUAL_LIST)

  SPEC_BASE : SEMICOLON (SEMICOLON)
            | VAL VALDESC (VAL ^ " " ^ VALDESC)
            | TYPE TYPDESC (TYPE ^ " " ^ TYPDESC)
            | EQTYPE TYPDESC (EQTYPE ^ " " ^ TYPDESC)
            | TYPE TYPBIND (TYPE ^ " " ^ TYPBIND)
            | DATATYPE DATDESC (DATATYPE ^ " " ^ DATDESC)
            | DATATYPE ID EQUALOP DATATYPE LONG_ID (concatWith_(" ", [DATATYPE, ID, EQUALOP, DATATYPE, LONG_ID]))
            | EXCEPTION EXNDESC (EXCEPTION ^ " " ^ EXNDESC)
            | STRUCTURE STRDESC (STRUCTURE ^ " " ^ STRDESC)
            | INCLUDE SIG_EXP (INCLUDE ^ " " ^ SIG_EXP)

  SPEC : SPEC_BASE (SPEC_BASE)
       | SPEC_BASE SPEC (SPEC_BASE ^ "\n" ^ SPEC)
       | SPEC_BASE SEMICOLON SPEC (SPEC_BASE ^ SEMICOLON ^ "\n" ^ SPEC)
       | SPEC SHARING TYPE LONG_ID_EQUAL_LIST (SPEC ^ " " ^ SHARING ^ " " ^ LONG_ID_EQUAL_LIST)

  VALDESC : ID COLON TYP (ID ^ COLON ^ " " ^ TYP)
          | ID COLON TYP AND TYPDESC (ID ^ COLON ^ " " ^ TYP ^ AND ^ " " ^ TYPDESC)

  TYPDESC : ID (ID)
          | VAR_ID_LIST ID (VAR_ID_LIST ^ " " ^ ID)
          | TYPDESC AND TYPDESC (TYPDESC ^ " " ^ AND ^ " " ^ TYPDESC)

  DATDESC : ID EQUALOP CONDESC (ID ^ " " ^ EQUALOP ^ " " ^ CONDESC)
          | VAR_ID_LIST ID EQUALOP CONDESC (VAR_ID_LIST ^ " " ^ ID ^ " " ^ EQUALOP ^ " " ^ CONDESC)
          | TYPDESC AND TYPDESC (TYPDESC ^ " " ^ AND ^ " " ^ TYPDESC)
  
  CONDESC_BASE : ID (ID)
               | ID OF TYP (ID ^ " " ^ OF ^ " " ^ TYP)

  CONDESC : CONDESC_BASE (CONDESC_BASE)
          | CONDESC_BASE BAR EXNDESC  (CONDESC_BASE ^ " " ^ BAR ^ " " ^ EXNDESC)


  EXNDESC_BASE : ID (ID)
               | ID OF TYP (ID ^ " " ^ OF ^ " " ^ TYP)

  EXNDESC : EXNDESC_BASE (EXNDESC_BASE)
          | EXNDESC_BASE AND EXNDESC  (EXNDESC_BASE ^ " " ^ AND ^ " " ^ EXNDESC)

  STRDESC : ID COLON SIG_EXP (ID ^ COLON ^ " " ^ SIG_EXP)
          | ID COLON SIG_EXP AND STRDESC (ID ^ COLON ^ " " ^ SIG_EXP ^ " " ^ AND ^ " " ^ STRDESC)

  FCTBIND_BASE : ID LPAREN ID COLON SIG_EXP RPAREN EQUALOP STR (concatWith_(" ", [ID, LPAREN, ID, COLON, SIG_EXP, RPAREN, EQUALOP, STR]))

               | ID LPAREN ID COLON SIG_EXP RPAREN COLON SIG_EXP EQUALOP STR (concatWith_(" ", [ID, LPAREN, ID, COLON, SIG_EXP, RPAREN, COLON, SIG_EXP, EQUALOP, STR]))

               | ID LPAREN ID COLON SIG_EXP RPAREN COLONGT SIG_EXP EQUALOP STR (concatWith_(" ", [ID, LPAREN, ID, COLON, SIG_EXP, RPAREN, COLONGT, SIG_EXP, EQUALOP, STR]))

               | ID LPAREN SPEC RPAREN EQUALOP STR (concatWith_(" ", [ID, LPAREN, SPEC, RPAREN, EQUALOP, STR]))

               | ID LPAREN SPEC RPAREN COLON SIG_EXP EQUALOP STR (concatWith_(" ", [ID, LPAREN, SPEC, RPAREN, COLON, SIG_EXP, EQUALOP, STR]))

               | ID LPAREN SPEC RPAREN COLONGT SIG_EXP EQUALOP STR  (concatWith_(" ", [ID, LPAREN, SPEC, RPAREN, COLONGT, SIG_EXP, EQUALOP, STR]))

  FCTBIND : FCTBIND_BASE (FCTBIND_BASE)

          | FCT_BIND_BASE AND FCTBIND (FCTBIND_BASE ^ " " ^ AND ^ " " ^ FCTBIND)

