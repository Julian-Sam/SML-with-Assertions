open String
open Int
val Conc: string ref = ref ""
exception LabError
fun concatWith_(x, lis) = concatWith (x) (lis);

%%

%eop EOF

%pos int

%left SUB PLUS
%left TIMES INTDIV
%right CARAT


%term 
    INT of string | EOF | COMMA of string |  PLUS of string | TIMES  of string 
    | INTDIV  of string | SUB of string | LPAREN of string | RPAREN of string 
    | REALDIV of string | CARAT of string | SEMICOLON of string | LBRACK of string 
    | RBRACK of string | ARROW of string | DARROW of string | BAR of string 
    | COLON of string | BANG of string | COLONGT of string | COMPOSITION of string 
    | UNEQUAL of string | EQUALOP of string | VARASSIGN of string | GREATERTHAN of string 
    | LESSTHAN of string | GREATERTHANEQUAL of string | LESSTHANEQUAL of string 
    | LET of string | IN of string | END of string | WHILE of string | DO of string 
    | IF of string | THEN of string | ELSE of string | ORELSE of string 
    | ANDALSO of string | HANDLE of string | RAISE of string | EXCEPTION of string
    | WORD of string | CHAR of string | STRING of string | REAL of string | ID_NAME of string
    | HASH of string | LCURLY of string | RCURLY of string | DOT of string

%nonterm START of string option 
       | CON of string
       | ID of string
       | LAB of string
       | LONG_ID
       | EXP of string | EXP_LIST of string | EXP_SEQ of string
       | EXP_ROW of string
       | DEC of string
       | MATCH of string



%name Sample

%prefer PLUS TIMES INTDIV SUB

%noshift EOF
%verbose
%%


  START : EXP (SOME (EXP ^ "\n")) 
        | EXP SEMICOLON (SOME (EXP ^ ";\n")) 
        | (NONE)

  CON : INT (INT) 
      | WORD (WORD)
      | REAL (REAL)
      | CHAR (CHAR)
      | STRING (STRING)

  ID : ID_NAME (ID_NAME)
     | UNEQUAL (UNEQUAL)
     | EQUALOP (EQUALOP)
     | VARASSIGN (VARASSIGN)
     | GREATERTHAN (GREATERTHAN)
     | LESSTHAN (LESSTHAN)
     | GREATERTHANEQUAL (GREATERTHANEQUAL)
     | LESSTHANEQUAL (LESSTHANEQUAL)
     | BAR (BAR)
     | COLON (COLON)
     | BANG (BANG)
     | PLUS (PLUS)
     | TIMES (TIMES) 
     | SUB (SUB) 
     | INTDIV (INTDIV) 
     | REALDIV (REALDIV) 

  LONG_ID : ID DOT ID (ID)  

  LAB : ID (ID)
      | INT (if sub(INT, 0) = #"~" orelse sub(INT,0) = #"0" then 
            ((print "Error: Record Var cannot start with 0 or ~"); raise LabError )
            else INT)

  EXP_LIST : EXP (EXP)
           | EXP COMMA EXP_LIST (EXP ^ ", " ^ EXP_LIST)

  EXP_SEQ : EXP SEMICOLON EXP (EXP ^ ";\n " ^ EXP)
          | EXP SEMICOLON EXP_SEQ (EXP ^ ";\n " ^ EXP_SEQ)


  EXP : CON (CON)

      | EXP ID EXP  (concatWith_(" ", [EXP1, ID, EXP2]))

      (* We add EXP and EXPLIST for parenthesis, since diff meanings
        (Tuple or just an exp *)
      | LPAREN EXP RPAREN (concatWith_(" ", [LPAREN, EXP, RPAREN]))

      | LPAREN EXP_LIST RPAREN (concatWith_(" ", [LPAREN, EXP_LIST, RPAREN])) 

      | LCURLY EXP_ROW RCURLY (concatWith_(" ", [LCURLY, EXP_ROW, RCURLY]))

      | HASH LAB (HASH ^ LAB)

      (* However for lists, we do not do the same as paren*)
      | LBRACK EXP_LIST RBRACK (concatWith_(" ", [LBRACK, EXP_LIST, RBRACK])) 
      
      | LPAREN EXP_SEQ RPAREN (concatWith_(" ", [LPAREN, EXP_SEQ, RPAREN]))

      | LET DEC IN EXP_SEQ END (concatWith_(" ", [LET, DEC, IN, EXP_SEQ, END]))

      | EXP COLON TYP (concatWith_(" ", [EXP, COLON, TYP]))

      | RAISE EXP (concatWith_(" ", [RAISE, EXP]))

      | EXP HANDLE MATCH (concatWith_(" ", [EXP, HANDLE, MATCH]))

      | EXP ANDALSO EXP (concatWith_(" ", [EXP1, ANDALSO, EXP2])) 

      | EXP ORELSE EXP (concatWith_(" ", [EXP1, ORELSE, EXP2])) 

      | IF EXP THEN EXP ELSE EXP (concatWith_(" ", [IF, EXP1, THEN, EXP2, ELSE, EXP3])) 

      | WHILE EXP DO EXP (concatWith_(" ", [WHILE, EXP, DO, EXP])) 

      | CASE EXP OF MATCH (concatWith_(" ", [CASE, EXP, "of\n", MATCH])) 

      | FN MATCH (concatWith_(" ", [FN, MATCH]))

  EXP_ROW : LAB EQUALOP EXP (LAB ^ " = " ^ EXP)
          | LAB EQUALOP EXP COMMA EXP_ROW (LAB ^ " = " ^ EXP ^ ", " ^ EXP_ROW)

  MATCH : PAT DARROW EXP (PAT ^ " => " EXP)

        | PAT DARROW EXP BAR MATCH (PAT ^ " => " EXP ^ " | " ^ MATCH)


 

