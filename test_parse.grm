(* Grammar file *)
open String
open Int
exception LabError
fun concatWith_(x, lis) = concatWith (x) (lis);
fun spacer(lis) = concatWith_(" ",lis);
%%

%eop EOF

%pos int

%term 
    INT of string | EOF | COMMA of string | TIMES of string 
    | LPAREN of string | RPAREN of string 
    | SEMICOLON of string | DOTTED_WILDCARD of string
    | LBRACK of string     | RBRACK of string | ARROW of string 
    | DARROW of string | BAR of string | COLON of string | BANG of string 
    | COLONGT of string | SYMBOLS of string 
    | EQUALOP of string
    | LET of string | IN of string | END of string | WHILE of string 
    | DO of string | IF of string | THEN of string | ELSE of string 
    | ORELSE of string | ANDALSO of string | HANDLE of string | RAISE of string
    | EXCEPTION of string | WORD of string | CHAR of string | STRING of string
    | REAL of string | ID of string | MOD of string | AND of string 
    | FN of string | VAL of string | CASE of string | OF of string 
    | WILD of string | HASH of string | LCURLY of string | RCURLY of string 
    | DOT of string | DCOLON of string | QUOTE_ID of string 
    | FUN of string | TYPE of string 
    | DATATYPE of string | ABSTYPE of string | WITHTYPE of string | STRUCT of string 
    | AS of string | STRUCTURE of string | NONFIX of string | INFIX of string 
    | INFIXR of string | OPEN of string | LOCAL of string | WITH of string 
    | REF of string | WHERE of string | EQTYPE of string | SHARING of string
    | INCLUDE of string | SIGNATURE of string | SIG of string | OP of string
    | FUNCTOR of string | LASSERT of string | RASSERT of string 
    | REQUIRES of string | ENSURES of string | REC of string 


%nonterm START of string option 
    | PROG of string | ID_NAMES of string | ID_LIST of string
    | ID_CURRY of string | VAR_ID_LIST of string | LONG_ID_LIST of string 
    | CON of string | VID of string | LONG_VID of string | TYP_VAR of string 
    | TYP_CON of string | LONG_TYP_CON of string | LAB of string 
    | STR_ID of string | LONG_STR_ID of string | SIG_ID of string 
    | FUN_ID of string | EXP_LIST of string | EXP_SEQ of string 
    | AT_EXP of string | EXP_ROW of string | APP_EXP of string 
    | INF_EXP of string | EXP of string | MRULE of string 
    | MATCH of string | TYP_TUPLE of string | TYP_SEQ of string 
    | TYP of string | TYP_ROW of string | PAT_LIST of string 
    | PAT_TUPLE of string | AT_PAT of string | PAT of string 
    | PAT_ROW of string | TYP_VAR_SEQ of string
    | LONG_STR_ID_LIST of string | VID_LIST of string 
    | AT_PAT_LIST of string | FVALBIND_BASE of string 
    | CONBIND_BASE of string | EXBIND_BASE of string 
    | DEC of string | VALBIND of string | FVALBIND of string 
    | TYPBIND of string | DATBIND of string | CONBIND of string 
    | EXBIND of string | SIG_EXP of string | SIG_DEC of string
    | SIG_BIND of string | SPEC_BASE of string | SPEC of string 
    | ASSERTIONS of string 

    | VAR_ID of string | LONG_ID of string


(*       | LONG_ID of string | CON of string 
       | EXP of string | EXP_LIST of string | EXP_SEQ of string
       | DEC of string | VALBIND of string | ID_LIST of string
       | MATCH of string | PAT of string | PAT_LIST of string
       | EXP_ROW of string | LAB of string | PROG of string
       | FUNBIND of string | FUNMATCH of string | TYP_ROW of string 
       | TYP of string | MULT_ID of string | VAR_ID of string 
       | TYP_TUPLE of string | TYPBIND of string | PAT_ROW of string
       | STR of string | STRBIND_BASE of string | STRBIND of string
       | SIG_EXP of string | ID_CURRY of string | AT_PAT_CURRY of string
       | LONG_ID_LIST of string | EXNBIND of string | DATBIND of string
       | ID_NAMES of string | EXNBIND_BASE of string | CONBIND of string
       | FUNMATCH_BASE of string | VAR_ID_LIST of string
       | DATBIND_BASE of string | TYPBIND_BASE of string 
       | TYPREFIN of string | LONG_ID_EQUAL_LIST of string 
       | SPEC of string | VALDESC of string | TYPDESC of string
       | DATDESC of string | CONDESC_BASE of string | CONDESC of string
       | EXNDESC_BASE of string | EXNDESC of string | STRDESC of string
       | SIGBIND of string | SPEC_BASE of string | TYPREFIN_BASE of string
       | AT_PAT of string | PAT_TUPLE of string | FCTBIND of string 
       | FCTBIND_BASE of string 
       | FVALBIND of string | FVALBIND_BASE of string 
       | EXBIND of string | EXBIND_BASE of string *)


%name Sample

%noshift EOF
%verbose
%%

  (* STARTING STATE *)
  START : PROG (SOME (PROG))
        | (NONE)

  PROG : EOF ("\n")
        | SEMICOLON PROG (SEMICOLON ^ "\n" ^ PROG)
        | DEC PROG (DEC ^ " " ^ PROG)
        | EXP PROG (EXP ^ " " ^ PROG)
        (*| SIGNATURE SIGBIND PROG (SIGNATURE ^ " " ^ SIGBIND ^ " " ^ PROG)*)
        (*| FUNCTOR FCTBIND PROG (FUNCTOR ^ " " ^ FCTBIND ^ " " ^ PROG)*)



  (* HELPERS, eventually delete *)
  ID_NAMES : ID (ID)
           | LPAREN ID_LIST RPAREN (LPAREN ^ " " ^ ID_LIST ^ " " ^ RPAREN)

  ID_LIST : ID (ID)
          | ID COMMA ID_LIST (ID ^ ", " ^ ID_LIST)

  ID_CURRY : ID (ID)
           | ID ID_CURRY (ID ^ " " ^ ID_CURRY)

  VAR_ID_LIST : VAR_ID (VAR_ID)
              | VAR_ID COMMA VAR_ID_LIST (concatWith_(" ", [VAR_ID, ", ", VAR_ID_LIST]))
              | LPAREN VAR_ID_LIST RPAREN (concatWith_(" ", [LPAREN, VAR_ID_LIST, RPAREN]))

  LONG_ID_LIST : LONG_ID (LONG_ID)
               | LONG_ID LONG_ID_LIST (LONG_ID ^ " " ^ LONG_ID_LIST)


  (*******************************************************************)

  (* IDENTIFIERS *)

  CON : INT (INT) 
      | WORD (WORD)
      | REAL (REAL)
      | CHAR (CHAR)
      | STRING (STRING)

    (* Value Identifier *)
      (*Note: Times and EQUALOP done here since its not lexed, 
        since we need it lexed to be used elsewhere*)
  VID : ID (ID)
      | SYMBOLS (SYMBOLS)
      | EQUALOP (EQUALOP)
      | TIMES (TIMES)

    (* Long Value Identifier*)
  LONG_VID : VID (VID)
           | VID DOT LONG_VID (VID ^ DOT ^ LONG_VID)

    (* Type Variables*)
  TYP_VAR : QUOTE_ID (QUOTE_ID)

    (* Type Constructor *)
      (*Note: Times is excluded here to avoid confusion with tuple types *)
  TYP_CON : ID (ID)
          | SYMBOLS (SYMBOLS)
          | EQUALOP (EQUALOP)

    (* Long Type Constructor*)
  LONG_TYP_CON : TYP_CON (TYP_CON)
               | TYP_CON DOT LONG_TYP_CON (TYP_CON ^ DOT ^ LONG_TYP_CON)

  LAB : ID (ID)
      | SYMBOLS (SYMBOLS)
      | EQUALOP (EQUALOP)
      | TIMES (TIMES)
      | INT (if sub(INT, 0) = #"~" orelse sub(INT,0) = #"0" then 
            ((print "Error: Record Var cannot start with 0 or ~"); raise LabError)
            else INT)

    (* Structure Identifier *)
  STR_ID : ID (ID)

    (* Long Structure Identifier *)
  LONG_STR_ID : STR_ID (STR_ID)
              | STR_ID DOT LONG_STR_ID (STR_ID ^ DOT ^ LONG_STR_ID)

    (* Signature Identifier *)
  SIG_ID : ID (ID)

    (* Functor Identifier *)
  FUN_ID : ID (ID)

 



  (*******************************************************************)

  (* EXPRESSIONS *)

  EXP_LIST : EXP (EXP)
           | EXP COMMA EXP_LIST (EXP ^ ", " ^ EXP_LIST)

  EXP_SEQ : EXP SEMICOLON EXP (EXP1 ^ ";\n " ^ EXP2)
          | EXP SEMICOLON EXP_SEQ (EXP ^ ";\n " ^ EXP_SEQ)

  ASSERTIONS : REQUIRES COLON EXP (spacer(["\n", REQUIRES, COLON, EXP])) 
             | ENSURES COLON EXP (spacer(["\n", ENSURES, COLON, EXP])) 
             | REQUIRES COLON EXP ASSERTIONS (spacer(["\n", REQUIRES, COLON, EXP, ASSERTIONS])) 
             | ENSURES COLON EXP ASSERTIONS (spacer(["\n", ENSURES, COLON, EXP, ASSERTIONS])) 

  AT_EXP : CON (CON)
         | LONG_VID ((*print (" <long_id> ");*) LONG_VID)
         | OP LONG_VID (OP ^ " " ^ LONG_VID)
         | LCURLY EXP_ROW RCURLY (concatWith_(" ", [LCURLY, EXP_ROW, RCURLY]))
         | HASH LAB (HASH ^ LAB)
         | LPAREN RPAREN (LPAREN ^ RPAREN) 
         | LPAREN EXP_LIST RPAREN (concatWith_(" ", [LPAREN, EXP_LIST, RPAREN])) 
         | LBRACK RBRACK (LBRACK ^ RBRACK) 
         | LBRACK EXP_LIST RBRACK (concatWith_(" ", [LBRACK, EXP_LIST, RBRACK])) 
         | LPAREN EXP_SEQ RPAREN (concatWith_(" ", [LPAREN, EXP_SEQ, RPAREN]))
         | LET DEC IN EXP END (concatWith_(" ", [LET, DEC, IN, "\n", EXP, "\n"]) ^ END)
         | LET DEC IN EXP_SEQ END (concatWith_(" ", [LET, DEC, IN, "\n", EXP_SEQ, "\n"]) ^ END)
         | LASSERT ASSERTIONS RASSERT (concatWith_(" ", [LASSERT, ASSERTIONS, RASSERT]))

  EXP_ROW : LAB EQUALOP EXP (LAB ^ " = " ^ EXP)
          | LAB EQUALOP EXP COMMA EXP_ROW (LAB ^ " = " ^ EXP ^ ", " ^ EXP_ROW)

  APP_EXP : AT_EXP (AT_EXP)
          | APP_EXP AT_EXP (APP_EXP ^ " " ^ AT_EXP)

  INF_EXP : APP_EXP (APP_EXP)
          | INF_EXP VID INF_EXP (INF_EXP1 ^ " " ^ VID ^ " " ^ INF_EXP2)

  EXP : INF_EXP (INF_EXP)
      | EXP COLON TYP (spacer([EXP, COLON, TYP]))
      | EXP ANDALSO EXP (spacer([EXP1, ANDALSO, EXP2])) 
      | EXP ORELSE EXP (spacer([EXP1, ORELSE, EXP2])) 
      | EXP HANDLE MATCH (spacer([EXP, HANDLE, MATCH]))
      | RAISE EXP (spacer([RAISE, EXP]))
      | IF EXP THEN EXP ELSE EXP (spacer([IF, EXP1, THEN, EXP2, ELSE, EXP3])) 
      | WHILE EXP DO EXP (spacer([WHILE, EXP1, DO, EXP2])) 
      | CASE EXP OF MATCH (spacer([CASE, EXP, "of\n", MATCH])) 
      | FN MATCH (spacer([FN, MATCH]))

  MRULE : PAT DARROW EXP (spacer([PAT, DARROW, EXP]))

  MATCH : MRULE (MRULE)
        | MRULE BAR MATCH (MRULE ^ "\n" ^ BAR ^ " " ^ MATCH)

  (*******************************************************************)


  (* TYPES *)

  TYP_TUPLE : TYP TIMES TYP (spacer([TYP1, TIMES, TYP2]))
            | TYP TIMES TYP_TUPLE (spacer([TYP, TIMES, TYP_TUPLE]))

  TYP_SEQ : TYP COMMA TYP (TYP1 ^ COMMA ^ " " ^ TYP2)
          | TYP COMMA TYP_SEQ (TYP ^ COMMA ^ TYP_SEQ)

  TYP : TYP_VAR (TYP_VAR)
      | LCURLY RCURLY (LCURLY ^ RCURLY)
      | LCURLY TYP_ROW RCURLY (spacer([LCURLY, TYP_ROW, RCURLY]))
      | LONG_TYP_CON (LONG_TYP_CON)
      | TYP LONG_TYP_CON (TYP ^ " " ^ LONG_TYP_CON)
      | LPAREN TYP_SEQ RPAREN LONG_TYP_CON (LPAREN ^ TYP_SEQ ^ RPAREN ^ " " ^ LONG_TYP_CON) 
      | TYP ARROW TYP (spacer([TYP1, ARROW, TYP2]))
      | TYP_TUPLE (TYP_TUPLE)
      | LPAREN TYP RPAREN (LPAREN ^ TYP ^ RPAREN)

  TYP_ROW : LAB COLON TYP (LAB ^ COLON ^ " " ^ TYP)
          | LAB COLON TYP COMMA TYP_ROW (LAB ^ COLON ^ " " ^ TYP ^ ", " ^ TYP_ROW)



  (*******************************************************************)


  (* Patterns *)


  PAT_LIST : PAT (PAT)
           | PAT COMMA PAT_LIST (PAT ^ ", " ^ PAT_LIST)
      
  PAT_TUPLE : PAT COMMA PAT (PAT1 ^ ", " ^ PAT2)
            | PAT COMMA PAT_TUPLE (PAT ^ ", " ^ PAT_TUPLE)

  AT_PAT : WILD (WILD)
         | CON (CON)
         | LONG_VID (LONG_VID)
         | OP LONG_VID (OP ^ " " ^ LONG_VID)
         | LCURLY RCURLY (LCURLY ^ RCURLY)
         | LCURLY PAT_ROW RCURLY (LCURLY ^ " " ^ PAT_ROW ^ " " ^ RCURLY)
         | LPAREN RPAREN (LPAREN ^ RPAREN)
         | LPAREN PAT_TUPLE RPAREN (spacer([LPAREN, PAT_TUPLE, RPAREN]))
         | LBRACK RBRACK (LBRACK ^ RBRACK)
         | LBRACK PAT_LIST RBRACK (spacer([LBRACK, PAT_LIST, RBRACK]))
         | LPAREN PAT RPAREN (spacer([LPAREN, PAT, RPAREN]))

  PAT_ROW : DOTTED_WILDCARD (DOTTED_WILDCARD)
          | LAB EQUALOP PAT (LAB ^ " " ^ EQUALOP ^ " " ^ PAT)
          | LAB EQUALOP PAT COMMA PAT_ROW (spacer([LAB, EQUALOP, PAT, COMMA, PAT_ROW]))
          | VID (VID)
          | VID COLON TYP (spacer([VID, COLON, TYP]))
          | VID AS PAT (spacer([VID, AS, PAT]))
          | VID COMMA PAT_ROW (spacer([VID, COMMA, PAT_ROW]))
          | VID COLON TYP AS PAT (spacer([VID, COLON, TYP, AS, PAT]))
          | VID AS PAT COMMA PAT_ROW (spacer([VID, AS, PAT, COMMA, PAT_ROW]))
          | VID COLON TYP COMMA PAT_ROW (spacer([VID, COLON, TYP, COMMA, PAT_ROW]))
          | VID COLON TYP AS PAT COMMA PAT_ROW (spacer([VID, COLON, TYP, AS, PAT, COMMA, PAT_ROW]))

  PAT : AT_PAT (AT_PAT)
      | LONG_VID AT_PAT (LONG_VID ^ " " ^ AT_PAT)
      | OP LONG_VID AT_PAT (spacer([OP, LONG_VID, AT_PAT]))
      | PAT VID PAT (spacer([PAT1, VID, PAT2]))
      | PAT COLON TYP (spacer([PAT, COLON, TYP]))
      | VID AS PAT (spacer([VID, AS, PAT]))
      | VID COLON TYP AS PAT (spacer([VID, COLON, TYP, AS, PAT]))
      | OP VID AS PAT (spacer([OP, VID, AS, PAT]))
      | OP VID COLON TYP AS PAT (spacer([OP, VID, COLON, TYP, AS, PAT]))

  (*******************************************************************)

  (* HELPERS *)

  TYP_VAR_SEQ : TYP_VAR (TYP_VAR)
              | TYP_VAR COMMA TYP_VAR_SEQ (spacer([TYP_VAR, COMMA, TYP_VAR_SEQ]))

  LONG_STR_ID_LIST : LONG_STR_ID (LONG_STR_ID)
                   | LONG_STR_ID LONG_STR_ID_LIST (spacer([LONG_STR_ID, LONG_STR_ID_LIST]))

  VID_LIST : VID (VID)
           | VID VID_LIST (VID ^ " " ^ VID_LIST)

  AT_PAT_LIST : AT_PAT (AT_PAT)
             | AT_PAT AT_PAT_LIST (AT_PAT ^ " " ^ AT_PAT_LIST)

  FVALBIND_BASE : VID AT_PAT_LIST EQUALOP EXP (spacer([VID, AT_PAT_LIST, EQUALOP, EXP]))
                | VID AT_PAT_LIST COLON TYP EQUALOP EXP (spacer([VID, AT_PAT_LIST, COLON, TYP, EQUALOP, EXP]))

  CONBIND_BASE : VID (VID)
               | VID OF TYP (spacer([VID, OF, TYP])) 

  EXBIND_BASE : VID (VID)
              | VID OF TYP (spacer([VID, OF, TYP]))
              | VID EQUALOP LONG_VID (spacer([VID, EQUALOP, LONG_VID]))
              | VID EQUALOP OP LONG_VID (spacer([VID, EQUALOP, OP, LONG_VID]))

  (* Declarations *)

  DEC : VAL TYP_VAR_SEQ VALBIND (spacer([VAL, TYP_VAR_SEQ, VALBIND]))
      | FUN TYP_VAR_SEQ FVALBIND (spacer([FUN, TYP_VAR_SEQ, FVALBIND]))
      | TYPE TYPBIND (spacer([TYPE, TYPBIND]))
      | DATATYPE DATBIND (spacer([DATATYPE, DATBIND])) 
      | DATATYPE DATBIND WITHTYPE TYPBIND (spacer([DATATYPE, DATBIND, WITHTYPE, TYPBIND]))
      | DATATYPE TYP_CON EQUALOP DATATYPE LONG_TYP_CON (spacer([DATATYPE, TYP_CON, EQUALOP, DATATYPE, LONG_TYP_CON]))
      | ABSTYPE DATBIND WITH DEC END (spacer([ABSTYPE, DATBIND, WITH, DEC, END]))
      | ABSTYPE DATBIND WITHTYPE TYPBIND WITH DEC END (spacer([ABSTYPE, DATBIND, WITHTYPE, TYPBIND, WITH, DEC, END]))
      | EXCEPTION EXBIND (spacer([EXCEPTION, EXBIND]))
      | LOCAL DEC IN DEC END (spacer([LOCAL, DEC1, IN, DEC2, END]))
      | OPEN LONG_STR_ID_LIST (spacer([OPEN, LONG_STR_ID_LIST]))
      | DEC DEC (spacer([DEC1, DEC2])) 
      | DEC SEMICOLON DEC (spacer([DEC1, SEMICOLON, "\n", DEC2]))
      | INFIX VID_LIST (spacer([INFIX, VID_LIST]))
      | INFIXR VID_LIST (spacer([INFIXR, VID_LIST]))
      | NONFIX VID_LIST (spacer([NONFIX, VID_LIST]))
      | ("\n") (* EMPTY *)

  VALBIND : PAT EQUALOP EXP (spacer([PAT, EQUALOP, EXP]))
          | PAT EQUALOP EXP AND VALBIND (spacer([PAT, EQUALOP, EXP, AND, VALBIND]))
          | REC VALBIND (spacer([REC, VALBIND]))

  FVALBIND : FVALBIND_BASE (spacer([FVALBIND_BASE]))
           | OP FVALBIND_BASE (spacer([OP, FVALBIND_BASE]))
           | FVALBIND_BASE AND FVALBIND (spacer([FVALBIND_BASE, AND, FVALBIND]))
           | OP FVALBIND_BASE AND FVALBIND (spacer([OP, FVALBIND_BASE, AND, FVALBIND]))

  TYPBIND : TYP_VAR_SEQ TYP_CON EQUALOP TYP (spacer([TYP_VAR_SEQ, TYP_CON, EQUALOP, TYP]))
          | TYP_VAR_SEQ TYP_CON EQUALOP TYP AND TYPBIND (spacer([TYP_VAR_SEQ, TYP_CON, EQUALOP, TYP, AND, TYPBIND]))

  DATBIND : TYP_VAR_SEQ TYP_CON EQUALOP CONBIND (spacer([TYP_VAR_SEQ, TYP_CON, EQUALOP, CONBIND]))
          | TYP_VAR_SEQ TYP_CON EQUALOP CONBIND AND DATBIND (spacer([TYP_VAR_SEQ, TYP_CON, EQUALOP, CONBIND, AND, DATBIND]))

  CONBIND : CONBIND_BASE (CONBIND_BASE)
          | OP CONBIND_BASE (spacer([OP, CONBIND_BASE]))
          | CONBIND_BASE BAR CONBIND (spacer([CONBIND_BASE, BAR, CONBIND]))
          | OP CONBIND_BASE BAR CONBIND (spacer([OP, CONBIND_BASE, BAR, CONBIND]))

  EXBIND : EXBIND_BASE (EXBIND_BASE)
         | OP EXBIND_BASE (spacer([OP, EXBIND_BASE]))
         | EXBIND_BASE BAR EXBIND (spacer([EXBIND_BASE, BAR, EXBIND]))
         | OP EXBIND_BASE BAR EXBIND (spacer([OP, EXBIND_BASE, BAR, EXBIND]))


  (*******************************************************************)
 
  (* Signatures *)
(*
  SIG_EXP : SIG SPEC END (SIG ^ "\n" ^ SPEC ^ "\n" ^ END)
          | SIG_ID (SIG_ID)
          | SIG_EXP WHERE TYPE TYPREFIN (concatWith_(" ", [SIG, "\n", WHERE, TYPE, TYPREFIN]))

  SIG_DEC : SIGNATURE SIG_BIND (SIGNATURE ^ " " ^ SIGBIND)

  SIG_BIND : SIG_ID EQUALOP SIG_EXP (SIG_ID ^ " " ^ EQUALOP ^ " " ^ SIG_EXP)
           | SIG_ID EQUALOP SIG_EXP AND SIG_BIND (SIG_ID ^ " " ^ EQUALOP ^ " " ^ SIG_EXP 
                                                  ^ "\n" ^ AND ^ "\n" ^ SIG_BIND)

  SPEC_BASE : VAL VAL_DESC (VAL ^ " " ^ VAL_DESC)
            | TYPE TYP_DESC (TYPE ^ " " ^ TYP_DESC)
            | EQTYPE TYP_DESC (EQTYPE ^ " " ^ TYP_DESC)
            | DATATYPE DAT_DESC (DATATYPE ^ " " ^ DAT_DESC)
            | DATATYPE TYP_CON EQUALOP DATATYPE LONG_TYP_CON (spacer([DATATYPE, TYP_CON, EQUALOP, 
                                                                        DATATYPE, LONG_TYP_CON]))
            | EXCEPTION EX_DESC (EXCEPTION ^ " " ^ EX_DESC)
            | STRUCTURE STR_DESC (STRUCTURE ^ " " ^ STR_DESC)
            | INCLUDE SIG_EXP (INCLUDE ^ " " ^ SIG_EXP)
            | ("")  (* EMPTY *)

            (* ? - exists in grammar but not in pdf - research this one below !! *)
(*            | TYPE TYP_BIND (TYPE ^ " " ^ TYP_BIND)

*)
(*  SPEC : SPEC_BASE (SPEC_BASE)
       | SPEC_BASE SPEC (SPEC_BASE ^ "\n" ^ SPEC)
       | SPEC_BASE SEMICOLON SPEC (SPEC_BASE ^ "\n" ^ SPEC)
       | SPEC SHARING TYPE LONG_TYP_CON_EQ_LIST (spacer([SPEC, SHARING, TYPE, LONG_TYP_CON_EQ_LIST]))

 *)
  (*******************************************************************)














 

(*
  AT_PAT_CURRY : AT_PAT (print (" <atpcurry -> AT_PAT> "); AT_PAT)

              | AT_PAT AT_PAT_CURRY (print (" <atpcurry -> AT_PAT pcurry> "); AT_PAT ^ " " ^ AT_PAT_CURRY)

*)


(*   Space seperated names for types. For example: 'a list list 

  MULT_ID : LONG_ID (LONG_ID)

          | REF (REF)

          | REF MULT_ID (REF ^ " " ^ MULT_ID)

          | LONG_ID MULT_ID (LONG_ID ^ " " ^ MULT_ID)


  TYP :  VAR_ID_LIST (VAR_ID_LIST)

      | VAR_ID_LIST MULT_ID (VAR_ID_LIST ^ " " ^ MULT_ID)

      | MULT_ID (MULT_ID)

      | LPAREN TYP RPAREN (LPAREN ^ TYP ^ RPAREN)
      
      | TYP ARROW TYP (concatWith_(" ", [TYP1, ARROW, TYP2]))
      
      | TYP_TUPLE (TYP_TUPLE)

      | LCURLY TYP_ROW RCURLY (concatWith_(" ", [LCURLY, TYP_ROW, RCURLY]))


  TYP_ROW : LAB COLON TYP (LAB ^ " : " ^ TYP)
         
          | LAB COLON TYP COMMA TYP_ROW (LAB ^ " : " ^ TYP ^ ", " ^ TYP_ROW)


  DEC : VAL VALBIND ("\n\n" ^ VAL ^ " " ^ VALBIND)

      | FUN FUNBIND (print (" <fun fbind> ");"\n\n" ^ FUN ^ " " ^ FUNBIND)

      | VAL VAR_ID_LIST VALBIND ("\n\n" ^ VAL ^ " " ^ VAR_ID_LIST ^ " " ^ VALBIND)

      | FUN VAR_ID_LIST FUNBIND ("\n\n" ^ FUN ^ " " ^ VAR_ID_LIST ^ " " ^ FUNBIND)

      | TYPE TYPBIND (TYPE ^ " " ^ TYPBIND)

      | DATATYPE DATBIND (DATATYPE ^ " " ^ DATBIND)

      | DATATYPE DATBIND WITHTYPE TYPBIND (concatWith_(" ", [DATATYPE, DATBIND, WITHTYPE, TYPBIND]))

      | DATATYPE ID EQUALOP DATATYPE LONG_ID (concatWith_(" ", [DATATYPE, ID, EQUALOP, DATATYPE, LONG_ID]))

      | ABSTYPE DATBIND WITH DEC END (concatWith_(" ", [ABSTYPE, DATBIND, WITH, DEC, END]))

      | ABSTYPE DATBIND WITHTYPE TYPBIND WITH DEC END (concatWith_(" ", [ABSTYPE, DATBIND, WITHTYPE, TYPBIND, WITH, DEC, END]))

      | EXCEPTION EXNBIND (concatWith_(" ", [EXCEPTION, EXNBIND]))

      | DEC DEC (print (" <dec1 dec2> "); DEC1 ^ "\n" ^ DEC2)

      | STRUCTURE STRBIND (print (" <struct stbind> "); STRUCTURE ^ " " ^ STRBIND)

      | DEC SEMICOLON (print (" <dec;> "); DEC ^ ";\n")

      | DEC SEMICOLON DEC (print (" <dec1; dec2> "); concatWith_(" ", [DEC1, ";\n", DEC2]))

      | LOCAL DEC IN DEC END (print (" <lcl dec in dec end> "); concatWith_(" ", [LOCAL, DEC1, IN, DEC2, END]))

      | OPEN LONG_ID_LIST (print (" <open lgidlist> "); OPEN ^ " " ^ LONG_ID_LIST)

      | NONFIX ID_CURRY (print (" <nonfix idcurry> "); NONFIX ^ " " ^ ID_CURRY)

      | INFIX ID_CURRY (print (" <infix idcurry> "); INFIX ^ " " ^ ID_CURRY)

      | INFIX INT ID_CURRY (print (" <infix int idcurry> "); INFIX ^ " " ^ INT ^ " " ^ ID_CURRY)

      | INFIXR ID_CURRY (print (" <infixr idcurry> "); INFIXR ^ " " ^ ID_CURRY)

      | INFIXR INT ID_CURRY (print (" <infixr int idcurry> "); INFIXR ^ " " ^ INT ^ " " ^ ID_CURRY)


  VALBIND : PAT EQUALOP EXP (print (" <pat = exp> "); concatWith_(" ", [PAT, EQUALOP, EXP]))

          | PAT EQUALOP EXP AND VALBIND (print (" <pat = exp and vbind> "); concatWith_(" ", [PAT, EQUALOP, EXP, " and ", VALBIND]))

*)



(*  FUNBIND : FUNMATCH (print (" <fmatch> "); FUNMATCH)

          | FUNMATCH AND FUNBIND (print (" <fmatch and fbind> "); FUNMATCH ^ " and " ^ FUNBIND)
*)
  (* Easier pattern matching for functions *)
(*
  FUNMATCH_BASE : ID AT_PAT_CURRY EQUALOP EXP (print (" <id pat = exp> "); concatWith_(" ", [ID, AT_PAT_CURRY, EQUALOP, EXP]))

                | ID AT_PAT_CURRY COLON TYP EQUALOP EXP ( print (" <if pat : typ = exp> "); concatWith_(" ", [ID, AT_PAT_CURRY, COLON, TYP, EQUALOP, EXP]))
 *)
           (*| ID AT_PAT_CURRY EQUALOP EXP BAR FUNMATCH (print (" <id pat = exp | fmatch> "); concatWith_(" ", [ID, AT_PAT_CURRY, EQUALOP, EXP, "\n  " , BAR, FUNMATCH]))*)
 
           (*| ID AT_PAT_CURRY COLON TYP EQUALOP EXP BAR FUNMATCH (print (" <if pat : typ = exp | fmatch> "); concatWith_(" ", [ID, AT_PAT_CURRY, COLON, TYP, EQUALOP, EXP, "\n  ", BAR, FUNMATCH]))*)
 

  (* Infix function declarations *)              

               (* | PAT ID PAT EQUALOP EXP (concatWith_(" ", [PAT1, ID, PAT2, EQUALOP, EXP]))

                | PAT ID PAT COLON TYP EQUALOP EXP  (concatWith_(" ", [PAT1, ID, PAT2, COLON, TYP, EQUALOP, EXP]))
*)
  
(*  FUNMATCH : FUNMATCH_BASE (print (" <fmatchb> "); FUNMATCH_BASE)

           | FUNMATCH_BASE BAR FUNMATCH (print (" <| fmatchb> "); FUNMATCH_BASE ^ " " ^ BAR ^ " " ^ FUNMATCH)






  TYPBIND_BASE : ID EQUALOP TYP (concatWith_(" ", [ID, EQUALOP, TYP]))

               | ID EQUALOP TYP AND TYPBIND (concatWith_(" ", [ID, EQUALOP, TYP, AND, TYPBIND]))


  TYPBIND : TYPBIND_BASE (TYPBIND_BASE)

          | VAR_ID_LIST TYPBIND_BASE (VAR_ID_LIST ^ " " ^ TYPBIND_BASE)


  DATBIND_BASE : ID_NAMES EQUALOP CONBIND (ID_NAMES ^ " " ^ EQUALOP ^ " " ^ CONBIND)

               | ID_NAMES EQUALOP CONBIND AND DATBIND (concatWith_(" ", [ID_NAMES, EQUALOP, CONBIND, AND, DATBIND]))


  DATBIND : DATBIND_BASE (DATBIND_BASE)

          | VAR_ID_LIST DATBIND_BASE (VAR_ID_LIST ^ " " ^ DATBIND_BASE)


  CONBIND : ID (ID)

          | ID OF TYP (ID ^ " " ^ OF ^ " " ^ TYP)

          | ID BAR CONBIND (ID ^ " " ^ BAR ^ " " ^ CONBIND)

          | ID OF TYP BAR CONBIND (concatWith_(" ", [ID, OF, TYP, BAR, CONBIND]))


  EXNBIND_BASE : ID (ID)

               | ID OF TYP (ID ^ " " ^ OF ^ " " ^ TYP)

               | ID EQUALOP LONG_ID (ID ^ " " ^ EQUALOP ^ " " ^ LONG_ID)


  EXNBIND : EXNBIND_BASE (EXNBIND_BASE)

          | EXNBIND_BASE AND EXNBIND (EXNBIND_BASE ^ " " ^ AND ^ " " ^ EXNBIND)*)


(*

  STR : LONG_ID (LONG_ID)

      | STRUCT DEC END (concatWith_("\n", [STRUCT, DEC, END]))
  
      | STR COLON SIG_EXP (concatWith_(" ", [STR, COLON, SIG_EXP]))
  
      | STR COLONGT SIG_EXP (concatWith_(" ", [STR, COLONGT, SIG_EXP]))
  
      | ID LPAREN STR RPAREN (concatWith_(" ", [ID, LPAREN, STR, RPAREN]))
  
      | ID LPAREN DEC RPAREN (concatWith_(" ", [ID, LPAREN, DEC, RPAREN]))
  
      | LET DEC IN STR END (concatWith_("\n", [LET, DEC, IN, STR, END]))


  STRBIND_BASE : ID EQUALOP STR (concatWith_(" ",[ID, EQUALOP, STR]))
  
               | ID COLON SIG_EXP EQUALOP STR (concatWith_(" ", [ID, COLON, SIG_EXP, EQUALOP, STR]))
  
               | ID COLONGT SIG_EXP EQUALOP STR (concatWith_(" ", [ID, COLONGT, SIG_EXP, EQUALOP, STR]))


  STRBIND : STRBIND_BASE (STRBIND_BASE)
  
          | STRBIND_BASE AND STRBIND (concatWith_(" ",[STRBIND_BASE, "\n", AND, "\n", STRBIND]))


  SIGBIND : ID EQUALOP SIG_EXP (ID ^ " " ^ EQUALOP ^ " " ^ SIG_EXP)
          | ID EQUALOP SIG_EXP AND SIGBIND (concatWith_(" ", [ID, EQUALOP, SIG_EXP, AND, SIGBIND]))

  SIG_EXP : ID (ID)
          | SIG SPEC END (SIG ^ "\n" ^ SPEC ^ "\n" ^ END)
          | SIG WHERE TYPE TYPREFIN (concatWith_(" ", [SIG, "\n", WHERE, TYPE, TYPREFIN]))

  TYPREFIN_BASE : LONG_ID EQUALOP TYP (LONG_ID ^ " " ^ EQUALOP ^ " " ^ TYP)
                | VAR_ID_LIST LONG_ID EQUALOP TYP (VAR_ID_LIST ^ " " ^ LONG_ID ^ " " ^ EQUALOP ^ " " ^ TYP)

  TYPREFIN : TYPREFIN_BASE (TYPREFIN_BASE)
           | TYPREFIN_BASE AND TYPE TYPREFIN (TYPREFIN_BASE ^ " " ^ AND ^ " " ^ TYPE ^ " " ^ TYPREFIN)
  
  LONG_ID_EQUAL_LIST : LONG_ID EQUALOP LONG_ID (LONG_ID ^ " " ^ EQUALOP ^ " " ^ LONG_ID)
                     | LONG_ID EQUALOP LONG_ID_EQUAL_LIST (LONG_ID ^ " " ^ EQUALOP ^ " " ^ LONG_ID_EQUAL_LIST)

  SPEC_BASE : SEMICOLON (SEMICOLON)
            | VAL VALDESC (VAL ^ " " ^ VALDESC)
            | TYPE TYPDESC (TYPE ^ " " ^ TYPDESC)
            | EQTYPE TYPDESC (EQTYPE ^ " " ^ TYPDESC)
            | TYPE TYPBIND (TYPE ^ " " ^ TYPBIND)
            | DATATYPE DATDESC (DATATYPE ^ " " ^ DATDESC)
            | DATATYPE ID EQUALOP DATATYPE LONG_ID (concatWith_(" ", [DATATYPE, ID, EQUALOP, DATATYPE, LONG_ID]))
            | EXCEPTION EXNDESC (EXCEPTION ^ " " ^ EXNDESC)
            | STRUCTURE STRDESC (STRUCTURE ^ " " ^ STRDESC)
            | INCLUDE SIG_EXP (INCLUDE ^ " " ^ SIG_EXP)

  SPEC : SPEC_BASE (SPEC_BASE)
       | SPEC_BASE SPEC (SPEC_BASE ^ "\n" ^ SPEC)
       | SPEC_BASE SEMICOLON SPEC (SPEC_BASE ^ SEMICOLON ^ "\n" ^ SPEC)
       | SPEC SHARING TYPE LONG_ID_EQUAL_LIST (SPEC ^ " " ^ SHARING ^ " " ^ LONG_ID_EQUAL_LIST)

  VALDESC : ID COLON TYP (ID ^ COLON ^ " " ^ TYP)
          | ID COLON TYP AND TYPDESC (ID ^ COLON ^ " " ^ TYP ^ AND ^ " " ^ TYPDESC)

  TYPDESC : ID (ID)
          | VAR_ID_LIST ID (VAR_ID_LIST ^ " " ^ ID)
          | TYPDESC AND TYPDESC (TYPDESC ^ " " ^ AND ^ " " ^ TYPDESC)

  DATDESC : ID EQUALOP CONDESC (ID ^ " " ^ EQUALOP ^ " " ^ CONDESC)
          | VAR_ID_LIST ID EQUALOP CONDESC (VAR_ID_LIST ^ " " ^ ID ^ " " ^ EQUALOP ^ " " ^ CONDESC)
          | TYPDESC AND TYPDESC (TYPDESC ^ " " ^ AND ^ " " ^ TYPDESC)
  
  CONDESC_BASE : ID (ID)
               | ID OF TYP (ID ^ " " ^ OF ^ " " ^ TYP)

  CONDESC : CONDESC_BASE (CONDESC_BASE)
          | CONDESC_BASE BAR EXNDESC  (CONDESC_BASE ^ " " ^ BAR ^ " " ^ EXNDESC)


  EXNDESC_BASE : ID (ID)
               | ID OF TYP (ID ^ " " ^ OF ^ " " ^ TYP)

  EXNDESC : EXNDESC_BASE (EXNDESC_BASE)
          | EXNDESC_BASE AND EXNDESC  (EXNDESC_BASE ^ " " ^ AND ^ " " ^ EXNDESC)

  STRDESC : ID COLON SIG_EXP (ID ^ COLON ^ " " ^ SIG_EXP)
          | ID COLON SIG_EXP AND STRDESC (ID ^ COLON ^ " " ^ SIG_EXP ^ " " ^ AND ^ " " ^ STRDESC)

  FCTBIND_BASE : ID LPAREN ID COLON SIG_EXP RPAREN EQUALOP STR (concatWith_(" ", [ID, LPAREN, ID, COLON, SIG_EXP, RPAREN, EQUALOP, STR]))

               | ID LPAREN ID COLON SIG_EXP RPAREN COLON SIG_EXP EQUALOP STR (concatWith_(" ", [ID, LPAREN, ID, COLON, SIG_EXP, RPAREN, COLON, SIG_EXP, EQUALOP, STR]))

               | ID LPAREN ID COLON SIG_EXP RPAREN COLONGT SIG_EXP EQUALOP STR (concatWith_(" ", [ID, LPAREN, ID, COLON, SIG_EXP, RPAREN, COLONGT, SIG_EXP, EQUALOP, STR]))

               | ID LPAREN SPEC RPAREN EQUALOP STR (concatWith_(" ", [ID, LPAREN, SPEC, RPAREN, EQUALOP, STR]))

               | ID LPAREN SPEC RPAREN COLON SIG_EXP EQUALOP STR (concatWith_(" ", [ID, LPAREN, SPEC, RPAREN, COLON, SIG_EXP, EQUALOP, STR]))

               | ID LPAREN SPEC RPAREN COLONGT SIG_EXP EQUALOP STR  (concatWith_(" ", [ID, LPAREN, SPEC, RPAREN, COLONGT, SIG_EXP, EQUALOP, STR]))

  FCTBIND : FCTBIND_BASE (FCTBIND_BASE)

          | FCTBIND_BASE AND FCTBIND (concatWith_(" ", [FCTBIND_BASE, AND, FCTBIND]))*)