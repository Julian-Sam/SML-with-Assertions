functor AssertEngineLexFun(structure Tokens: AssertEngine_TOKENS)  = struct

    structure yyInput : sig

        type stream
	val mkStream : (int -> string) -> stream
	val fromStream : TextIO.StreamIO.instream -> stream
	val getc : stream -> (Char.char * stream) option
	val getpos : stream -> int
	val getlineNo : stream -> int
	val subtract : stream * stream -> string
	val eof : stream -> bool
	val lastWasNL : stream -> bool

      end = struct

        structure TIO = TextIO
        structure TSIO = TIO.StreamIO
	structure TPIO = TextPrimIO

        datatype stream = Stream of {
            strm : TSIO.instream,
	    id : int,  (* track which streams originated 
			* from the same stream *)
	    pos : int,
	    lineNo : int,
	    lastWasNL : bool
          }

	local
	  val next = ref 0
	in
	fun nextId() = !next before (next := !next + 1)
	end

	val initPos = 2 (* ml-lex bug compatibility *)

	fun mkStream inputN = let
              val strm = TSIO.mkInstream 
			   (TPIO.RD {
			        name = "lexgen",
				chunkSize = 4096,
				readVec = SOME inputN,
				readArr = NONE,
				readVecNB = NONE,
				readArrNB = NONE,
				block = NONE,
				canInput = NONE,
				avail = (fn () => NONE),
				getPos = NONE,
				setPos = NONE,
				endPos = NONE,
				verifyPos = NONE,
				close = (fn () => ()),
				ioDesc = NONE
			      }, "")
	      in 
		Stream {strm = strm, id = nextId(), pos = initPos, lineNo = 1,
			lastWasNL = true}
	      end

	fun fromStream strm = Stream {
		strm = strm, id = nextId(), pos = initPos, lineNo = 1, lastWasNL = true
	      }

	fun getc (Stream {strm, pos, id, lineNo, ...}) = (case TSIO.input1 strm
              of NONE => NONE
	       | SOME (c, strm') => 
		   SOME (c, Stream {
			        strm = strm', 
				pos = pos+1, 
				id = id,
				lineNo = lineNo + 
					 (if c = #"\n" then 1 else 0),
				lastWasNL = (c = #"\n")
			      })
	     (* end case*))

	fun getpos (Stream {pos, ...}) = pos

	fun getlineNo (Stream {lineNo, ...}) = lineNo

	fun subtract (new, old) = let
	      val Stream {strm = strm, pos = oldPos, id = oldId, ...} = old
	      val Stream {pos = newPos, id = newId, ...} = new
              val (diff, _) = if newId = oldId andalso newPos >= oldPos
			      then TSIO.inputN (strm, newPos - oldPos)
			      else raise Fail 
				"BUG: yyInput: attempted to subtract incompatible streams"
	      in 
		diff 
	      end

	fun eof s = not (isSome (getc s))

	fun lastWasNL (Stream {lastWasNL, ...}) = lastWasNL

      end

    datatype yystart_state = 
COMMENT | INITIAL
    structure UserDeclarations = 
      struct

structure Tokens = Tokens
type pos = int
type svalue = Tokens.svalue
type ('a,'b) token = ('a,'b) Tokens.token
type lexresult = (svalue,pos) token
exception UnmatchedComments
val pos = ref 1

(*  *)
val assertion_list_ref: (int list * int list * int list) ref = ref ([], [], [])
val final_ref_list: (int list * int list * int list) ref = ref ([], [], [])

fun req num = let
			   val (req_list, ens_list, _) = !assertion_list_ref
			 in
			   assertion_list_ref := (num :: req_list, ens_list, [])
			 end

fun ens num = let
			   val (req_list, ens_list, _) = !assertion_list_ref
			 in
			   assertion_list_ref := (req_list, num :: ens_list, [])
			 end

fun rev_str (str: string) = String.implode (List.rev (String.explode (str)))

(* Holds the number of unmatched comments at any given time. Used to balance comment parenthesis *)
val unmatched_comments = ref 0

(* Increment and Decrement functions *)
fun inc(x) = x := (!x + 1)
fun dec(x) = x := (!x - 1)

fun eof () = (if (!unmatched_comments) <> 0 
			 then (print("Error: Unmatched Comment Bracket"); raise UnmatchedComments)
			 else (let
					 val (ws, nl, _) = !assertion_list_ref
					 val final_ref_list = ref (List.rev (ws), List.rev (nl), [])
				   in
					 pos := 1;
					 assertion_list_ref := ([], [], []);
					 Tokens.EOF(final_ref_list, !pos, !pos)
				   end))

fun error (e,l : int,_) = print (String.concat[
	"line ", (Int.toString l), ": ", e, "\n"
      ])




      end

    datatype yymatch 
      = yyNO_MATCH
      | yyMATCH of yyInput.stream * action * yymatch
    withtype action = yyInput.stream * yymatch -> UserDeclarations.lexresult

    local

    val yytable = 
#[([(#"\^@",#"\t",2),
(#"\v",#"'",2),
(#")",#")",2),
(#"+",#"\255",2),
(#"\n",#"\n",3),
(#"(",#"(",4),
(#"*",#"*",5)], []), ([(#"\^@",#"\b",8),
(#"\v",#"\^_",8),
(#"\127",#"\255",8),
(#"\t",#"\t",9),
(#"\n",#"\n",10),
(#" ",#" ",11),
(#"!",#"!",12),
(#"\"",#"\"",13),
(#"#",#"#",14),
(#"$",#"&",15),
(#"+",#"+",15),
(#"/",#"/",15),
(#"<",#"<",15),
(#">",#"@",15),
(#"\\",#"\\",15),
(#"^",#"^",15),
(#"`",#"`",15),
(#"'",#"'",16),
(#"(",#"(",17),
(#")",#")",18),
(#"*",#"*",19),
(#",",#",",20),
(#"-",#"-",21),
(#".",#".",22),
(#"0",#"0",23),
(#"1",#"9",24),
(#":",#":",25),
(#";",#";",26),
(#"=",#"=",27),
(#"A",#"D",28),
(#"F",#"Q",28),
(#"S",#"Z",28),
(#"b",#"b",28),
(#"g",#"g",28),
(#"j",#"k",28),
(#"m",#"m",28),
(#"p",#"q",28),
(#"u",#"u",28),
(#"x",#"z",28),
(#"E",#"E",29),
(#"R",#"R",30),
(#"[",#"[",31),
(#"]",#"]",32),
(#"_",#"_",33),
(#"a",#"a",34),
(#"c",#"c",35),
(#"d",#"d",36),
(#"e",#"e",37),
(#"f",#"f",38),
(#"h",#"h",39),
(#"i",#"i",40),
(#"l",#"l",41),
(#"n",#"n",42),
(#"o",#"o",43),
(#"r",#"r",44),
(#"s",#"s",45),
(#"t",#"t",46),
(#"v",#"v",47),
(#"w",#"w",48),
(#"{",#"{",49),
(#"|",#"|",50),
(#"}",#"}",51),
(#"~",#"~",52)], []), ([], [26]), ([], [25]), ([(#"*",#"*",7)], [26]), ([(#")",#")",6)], [26]), ([], [24]), ([], [23]), ([], [81]), ([], [1, 81]), ([], [2]), ([], [0, 81]), ([(#"!",#"!",53),
(#"#",#"&",53),
(#"+",#"+",53),
(#"-",#"-",53),
(#"/",#"/",53),
(#":",#":",53),
(#"<",#"@",53),
(#"\\",#"\\",53),
(#"^",#"^",53),
(#"`",#"`",53),
(#"|",#"|",53),
(#"~",#"~",53),
(#"*",#"*",246)], [78, 81]), ([(#"\^@",#"!",236),
(#"#",#"[",236),
(#"]",#"\255",236),
(#"\"",#"\"",237),
(#"\\",#"\\",238)], [81]), ([(#"!",#"!",53),
(#"#",#"&",53),
(#"*",#"+",53),
(#"-",#"-",53),
(#"/",#"/",53),
(#":",#":",53),
(#"<",#"@",53),
(#"\\",#"\\",53),
(#"^",#"^",53),
(#"`",#"`",53),
(#"|",#"|",53),
(#"~",#"~",53),
(#"\"",#"\"",224)], [19, 78, 81]), ([(#"!",#"!",53),
(#"#",#"&",53),
(#"*",#"+",53),
(#"-",#"-",53),
(#"/",#"/",53),
(#":",#":",53),
(#"<",#"@",53),
(#"\\",#"\\",53),
(#"^",#"^",53),
(#"`",#"`",53),
(#"|",#"|",53),
(#"~",#"~",53)], [78, 81]), ([(#"'",#"'",223),
(#"0",#"9",223),
(#"A",#"Z",223),
(#"_",#"_",223),
(#"a",#"z",223)], [81]), ([(#"*",#"*",221)], [29, 81]), ([], [30, 81]), ([(#"!",#"!",53),
(#"#",#"&",53),
(#"*",#"+",53),
(#"-",#"-",53),
(#"/",#"/",53),
(#":",#":",53),
(#"<",#"@",53),
(#"\\",#"\\",53),
(#"^",#"^",53),
(#"`",#"`",53),
(#"|",#"|",53),
(#"~",#"~",53)], [10, 78, 81]), ([], [12, 81]), ([(#"!",#"!",53),
(#"#",#"&",53),
(#"*",#"+",53),
(#"-",#"-",53),
(#"/",#"/",53),
(#":",#":",53),
(#"<",#"=",53),
(#"?",#"@",53),
(#"\\",#"\\",53),
(#"^",#"^",53),
(#"`",#"`",53),
(#"|",#"|",53),
(#"~",#"~",53),
(#">",#">",220)], [78, 81]), ([(#".",#".",218)], [13, 81]), ([(#".",#".",56),
(#"0",#"9",55),
(#"E",#"E",57),
(#"e",#"e",57),
(#"w",#"w",214),
(#"x",#"x",61)], [3, 81]), ([(#".",#".",56),
(#"0",#"9",55),
(#"E",#"E",57),
(#"e",#"e",57)], [3, 81]), ([(#"!",#"!",53),
(#"#",#"&",53),
(#"*",#"+",53),
(#"-",#"-",53),
(#"/",#"/",53),
(#":",#":",53),
(#"<",#"=",53),
(#"?",#"@",53),
(#"\\",#"\\",53),
(#"^",#"^",53),
(#"`",#"`",53),
(#"|",#"|",53),
(#"~",#"~",53),
(#">",#">",213)], [17, 78, 81]), ([], [11, 81]), ([(#"!",#"!",53),
(#"#",#"&",53),
(#"*",#"+",53),
(#"-",#"-",53),
(#"/",#"/",53),
(#":",#":",53),
(#"<",#"=",53),
(#"?",#"@",53),
(#"\\",#"\\",53),
(#"^",#"^",53),
(#"`",#"`",53),
(#"|",#"|",53),
(#"~",#"~",53),
(#">",#">",212)], [9, 78, 81]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [80, 81]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"M",63),
(#"O",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63),
(#"N",#"N",206)], [80, 81]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"D",63),
(#"F",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63),
(#"E",#"E",199)], [80, 81]), ([], [27, 81]), ([], [28, 81]), ([], [50, 81]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"a",63),
(#"c",#"m",63),
(#"o",#"r",63),
(#"t",#"z",63),
(#"b",#"b",186),
(#"n",#"n",187),
(#"s",#"s",188)], [80, 81]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"b",#"z",63),
(#"a",#"a",183)], [80, 81]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"b",#"n",63),
(#"p",#"z",63),
(#"a",#"a",175),
(#"o",#"o",176)], [80, 81]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"k",63),
(#"m",#"m",63),
(#"o",#"p",63),
(#"r",#"w",63),
(#"y",#"z",63),
(#"l",#"l",157),
(#"n",#"n",158),
(#"q",#"q",159),
(#"x",#"x",160)], [80, 81]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"m",63),
(#"o",#"t",63),
(#"v",#"z",63),
(#"n",#"n",150),
(#"u",#"u",151)], [80, 81]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"b",#"z",63),
(#"a",#"a",145)], [80, 81]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"e",63),
(#"g",#"m",63),
(#"o",#"z",63),
(#"f",#"f",134),
(#"n",#"n",135)], [80, 81]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"d",63),
(#"f",#"n",63),
(#"p",#"z",63),
(#"e",#"e",128),
(#"o",#"o",129)], [80, 81]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"n",63),
(#"p",#"z",63),
(#"o",#"o",123)], [80, 81]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"e",63),
(#"g",#"o",63),
(#"q",#"q",63),
(#"s",#"z",63),
(#"f",#"f",114),
(#"p",#"p",115),
(#"r",#"r",116)], [80, 81]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"b",#"d",63),
(#"f",#"z",63),
(#"a",#"a",108),
(#"e",#"e",109)], [80, 81]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"g",63),
(#"j",#"s",63),
(#"u",#"z",63),
(#"h",#"h",86),
(#"i",#"i",87),
(#"t",#"t",88)], [80, 81]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"g",63),
(#"i",#"x",63),
(#"z",#"z",63),
(#"h",#"h",80),
(#"y",#"y",81)], [80, 81]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"b",#"z",63),
(#"a",#"a",78)], [80, 81]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"g",63),
(#"j",#"z",63),
(#"h",#"h",64),
(#"i",#"i",65)], [80, 81]), ([], [20, 81]), ([(#"!",#"!",53),
(#"#",#"&",53),
(#"*",#"+",53),
(#"-",#"-",53),
(#"/",#"/",53),
(#":",#":",53),
(#"<",#"@",53),
(#"\\",#"\\",53),
(#"^",#"^",53),
(#"`",#"`",53),
(#"|",#"|",53),
(#"~",#"~",53)], [16, 78, 81]), ([], [21, 81]), ([(#"!",#"!",53),
(#"#",#"&",53),
(#"*",#"+",53),
(#"-",#"-",53),
(#"/",#"/",53),
(#":",#":",53),
(#"<",#"@",53),
(#"\\",#"\\",53),
(#"^",#"^",53),
(#"`",#"`",53),
(#"|",#"|",53),
(#"~",#"~",53),
(#"0",#"0",54),
(#"1",#"9",55)], [78, 81]), ([(#"!",#"!",53),
(#"#",#"&",53),
(#"*",#"+",53),
(#"-",#"-",53),
(#"/",#"/",53),
(#":",#":",53),
(#"<",#"@",53),
(#"\\",#"\\",53),
(#"^",#"^",53),
(#"`",#"`",53),
(#"|",#"|",53),
(#"~",#"~",53)], [78]), ([(#".",#".",56),
(#"0",#"9",55),
(#"E",#"E",57),
(#"e",#"e",57),
(#"x",#"x",61)], [3]), ([(#".",#".",56),
(#"0",#"9",55),
(#"E",#"E",57),
(#"e",#"e",57)], [3]), ([(#"0",#"9",60)], []), ([(#"0",#"9",58),
(#"~",#"~",59)], []), ([(#"0",#"9",58)], [5]), ([(#"0",#"9",58)], []), ([(#"0",#"9",60),
(#"E",#"E",57),
(#"e",#"e",57)], [5]), ([(#"0",#"9",62),
(#"A",#"F",62),
(#"a",#"f",62)], []), ([(#"0",#"9",62),
(#"A",#"F",62),
(#"a",#"f",62)], [4]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"d",63),
(#"f",#"h",63),
(#"j",#"z",63),
(#"e",#"e",72),
(#"i",#"i",73)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"s",63),
(#"u",#"z",63),
(#"t",#"t",66)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"g",63),
(#"i",#"z",63),
(#"h",#"h",67)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"s",63),
(#"u",#"z",63),
(#"t",#"t",68)], [56, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"x",63),
(#"z",#"z",63),
(#"y",#"y",69)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"o",63),
(#"q",#"z",63),
(#"p",#"p",70)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"d",63),
(#"f",#"z",63),
(#"e",#"e",71)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [57, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"q",63),
(#"s",#"z",63),
(#"r",#"r",76)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"k",63),
(#"m",#"z",63),
(#"l",#"l",74)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"d",63),
(#"f",#"z",63),
(#"e",#"e",75)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [34, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"d",63),
(#"f",#"z",63),
(#"e",#"e",77)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [70, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"k",63),
(#"m",#"z",63),
(#"l",#"l",79)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [44, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"d",63),
(#"f",#"z",63),
(#"e",#"e",84)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"o",63),
(#"q",#"z",63),
(#"p",#"p",82)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"d",63),
(#"f",#"z",63),
(#"e",#"e",83)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [53, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"m",63),
(#"o",#"z",63),
(#"n",#"n",85)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [32, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"b",#"z",63),
(#"a",#"a",103)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"f",63),
(#"h",#"z",63),
(#"g",#"g",96)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"q",63),
(#"s",#"z",63),
(#"r",#"r",89)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"t",63),
(#"v",#"z",63),
(#"u",#"u",90)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"b",63),
(#"d",#"z",63),
(#"c",#"c",91)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"s",63),
(#"u",#"z",63),
(#"t",#"t",92)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"t",63),
(#"v",#"z",63),
(#"u",#"u",93)], [64, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"q",63),
(#"s",#"z",63),
(#"r",#"r",94)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"d",63),
(#"f",#"z",63),
(#"e",#"e",95)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [65, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"m",63),
(#"o",#"z",63),
(#"n",#"n",97)], [66, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"b",#"z",63),
(#"a",#"a",98)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"s",63),
(#"u",#"z",63),
(#"t",#"t",99)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"t",63),
(#"v",#"z",63),
(#"u",#"u",100)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"q",63),
(#"s",#"z",63),
(#"r",#"r",101)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"d",63),
(#"f",#"z",63),
(#"e",#"e",102)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [67, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"q",63),
(#"s",#"z",63),
(#"r",#"r",104)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"h",63),
(#"j",#"z",63),
(#"i",#"i",105)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"m",63),
(#"o",#"z",63),
(#"n",#"n",106)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"f",63),
(#"h",#"z",63),
(#"g",#"g",107)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [72, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"h",63),
(#"j",#"z",63),
(#"i",#"i",111)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"b",63),
(#"d",#"z",63),
(#"c",#"c",110)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [52, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"r",63),
(#"t",#"z",63),
(#"s",#"s",112)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"d",63),
(#"f",#"z",63),
(#"e",#"e",113)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [42, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [49, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"d",63),
(#"f",#"z",63),
(#"e",#"e",121)], [51, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"d",63),
(#"f",#"z",63),
(#"e",#"e",117)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"k",63),
(#"m",#"z",63),
(#"l",#"l",118)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"r",63),
(#"t",#"z",63),
(#"s",#"s",119)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"d",63),
(#"f",#"z",63),
(#"e",#"e",120)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [39, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"m",63),
(#"o",#"z",63),
(#"n",#"n",122)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [59, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"m",63),
(#"o",#"z",63),
(#"n",#"n",124)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"e",63),
(#"g",#"z",63),
(#"f",#"f",125)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"h",63),
(#"j",#"z",63),
(#"i",#"i",126)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"w",63),
(#"y",#"z",63),
(#"x",#"x",127)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [63, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"s",63),
(#"u",#"z",63),
(#"t",#"t",133)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"b",63),
(#"d",#"z",63),
(#"c",#"c",130)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"b",#"z",63),
(#"a",#"a",131)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"k",63),
(#"m",#"z",63),
(#"l",#"l",132)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [60, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [36, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [31, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"b",63),
(#"d",#"e",63),
(#"g",#"z",63),
(#"c",#"c",136),
(#"f",#"f",137)], [37, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"k",63),
(#"m",#"z",63),
(#"l",#"l",141)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"h",63),
(#"j",#"z",63),
(#"i",#"i",138)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"w",63),
(#"y",#"z",63),
(#"x",#"x",139)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"q",63),
(#"s",#"z",63),
(#"r",#"r",140)], [61, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [62, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"t",63),
(#"v",#"z",63),
(#"u",#"u",142)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"c",63),
(#"e",#"z",63),
(#"d",#"d",143)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"d",63),
(#"f",#"z",63),
(#"e",#"e",144)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [69, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"m",63),
(#"o",#"z",63),
(#"n",#"n",146)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"c",63),
(#"e",#"z",63),
(#"d",#"d",147)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"k",63),
(#"m",#"z",63),
(#"l",#"l",148)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"d",63),
(#"f",#"z",63),
(#"e",#"e",149)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [41, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [46, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"m",63),
(#"o",#"z",63),
(#"n",#"n",152)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"b",63),
(#"d",#"z",63),
(#"c",#"c",153)], [47, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"s",63),
(#"u",#"z",63),
(#"t",#"t",154)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"n",63),
(#"p",#"z",63),
(#"o",#"o",155)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"q",63),
(#"s",#"z",63),
(#"r",#"r",156)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [68, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"r",63),
(#"t",#"z",63),
(#"s",#"s",173)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"c",63),
(#"e",#"z",63),
(#"d",#"d",172)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"s",63),
(#"u",#"z",63),
(#"t",#"t",168)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"b",63),
(#"d",#"z",63),
(#"c",#"c",161)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"d",63),
(#"f",#"z",63),
(#"e",#"e",162)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"o",63),
(#"q",#"z",63),
(#"p",#"p",163)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"s",63),
(#"u",#"z",63),
(#"t",#"t",164)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"h",63),
(#"j",#"z",63),
(#"i",#"i",165)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"n",63),
(#"p",#"z",63),
(#"o",#"o",166)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"m",63),
(#"o",#"z",63),
(#"n",#"n",167)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [43, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"x",63),
(#"z",#"z",63),
(#"y",#"y",169)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"o",63),
(#"q",#"z",63),
(#"p",#"p",170)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"d",63),
(#"f",#"z",63),
(#"e",#"e",171)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [71, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [38, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"d",63),
(#"f",#"z",63),
(#"e",#"e",174)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [33, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"s",63),
(#"u",#"z",63),
(#"t",#"t",177)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [35, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"b",#"z",63),
(#"a",#"a",178)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"s",63),
(#"u",#"z",63),
(#"t",#"t",179)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"x",63),
(#"z",#"z",63),
(#"y",#"y",180)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"o",63),
(#"q",#"z",63),
(#"p",#"p",181)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"d",63),
(#"f",#"z",63),
(#"e",#"e",182)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [54, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"r",63),
(#"t",#"z",63),
(#"s",#"s",184)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"d",63),
(#"f",#"z",63),
(#"e",#"e",185)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [48, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"r",63),
(#"t",#"z",63),
(#"s",#"s",194)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"c",63),
(#"e",#"z",63),
(#"d",#"d",189)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [58, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"b",#"z",63),
(#"a",#"a",190)], [45, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"k",63),
(#"m",#"z",63),
(#"l",#"l",191)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"r",63),
(#"t",#"z",63),
(#"s",#"s",192)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"n",63),
(#"p",#"z",63),
(#"o",#"o",193)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [40, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"s",63),
(#"u",#"z",63),
(#"t",#"t",195)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"x",63),
(#"z",#"z",63),
(#"y",#"y",196)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"o",63),
(#"q",#"z",63),
(#"p",#"p",197)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"d",63),
(#"f",#"z",63),
(#"e",#"e",198)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [55, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"P",63),
(#"R",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63),
(#"Q",#"Q",200)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"T",63),
(#"V",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63),
(#"U",#"U",201)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"H",63),
(#"J",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63),
(#"I",#"I",202)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Q",63),
(#"S",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63),
(#"R",#"R",203)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"D",63),
(#"F",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63),
(#"E",#"E",204)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"R",63),
(#"T",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63),
(#"S",#"S",205)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [76, 80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"R",63),
(#"T",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63),
(#"S",#"S",207)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"T",63),
(#"V",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63),
(#"U",#"U",208)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Q",63),
(#"S",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63),
(#"R",#"R",209)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"D",63),
(#"F",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63),
(#"E",#"E",210)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"R",63),
(#"T",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63),
(#"S",#"S",211)], [80]), ([(#"'",#"'",63),
(#"0",#"9",63),
(#"A",#"Z",63),
(#"_",#"_",63),
(#"a",#"z",63)], [77, 80]), ([(#"!",#"!",53),
(#"#",#"&",53),
(#"*",#"+",53),
(#"-",#"-",53),
(#"/",#"/",53),
(#":",#":",53),
(#"<",#"@",53),
(#"\\",#"\\",53),
(#"^",#"^",53),
(#"`",#"`",53),
(#"|",#"|",53),
(#"~",#"~",53)], [15, 78]), ([(#"!",#"!",53),
(#"#",#"&",53),
(#"*",#"+",53),
(#"-",#"-",53),
(#"/",#"/",53),
(#":",#":",53),
(#"<",#"@",53),
(#"\\",#"\\",53),
(#"^",#"^",53),
(#"`",#"`",53),
(#"|",#"|",53),
(#"~",#"~",53)], [18, 78]), ([(#"0",#"9",215),
(#"x",#"x",216)], []), ([(#"0",#"9",215)], [6]), ([(#"0",#"9",217),
(#"A",#"F",217),
(#"a",#"f",217)], []), ([(#"0",#"9",217),
(#"A",#"F",217),
(#"a",#"f",217)], [6]), ([(#".",#".",219)], []), ([], [73]), ([(#"!",#"!",53),
(#"#",#"&",53),
(#"*",#"+",53),
(#"-",#"-",53),
(#"/",#"/",53),
(#":",#":",53),
(#"<",#"@",53),
(#"\\",#"\\",53),
(#"^",#"^",53),
(#"`",#"`",53),
(#"|",#"|",53),
(#"~",#"~",53)], [14, 78]), ([(#"!",#"!",222)], [22]), ([], [74]), ([(#"'",#"'",223),
(#"0",#"9",223),
(#"A",#"Z",223),
(#"_",#"_",223),
(#"a",#"z",223)], [79]), ([(#"\^@",#"[",225),
(#"]",#"\255",225),
(#"\\",#"\\",226)], []), ([(#"\"",#"\"",235)], []), ([(#"\"",#"\"",227),
(#"0",#"9",228),
(#"\\",#"\\",225),
(#"a",#"b",225),
(#"f",#"f",225),
(#"n",#"n",225),
(#"r",#"r",225),
(#"t",#"t",225),
(#"v",#"v",225),
(#"^",#"^",229),
(#"u",#"u",230)], []), ([(#"\"",#"\"",235)], [7]), ([(#"0",#"9",234)], []), ([(#"\^@",#"\255",225)], []), ([(#"0",#"9",231),
(#"A",#"F",231),
(#"a",#"f",231)], []), ([(#"0",#"9",232),
(#"A",#"F",232),
(#"a",#"f",232)], []), ([(#"0",#"9",233),
(#"A",#"F",233),
(#"a",#"f",233)], []), ([(#"0",#"9",225),
(#"A",#"F",225),
(#"a",#"f",225)], []), ([(#"0",#"9",225)], []), ([], [7]), ([(#"\^@",#"!",236),
(#"#",#"[",236),
(#"]",#"\255",236),
(#"\"",#"\"",237),
(#"\\",#"\\",238)], []), ([], [8]), ([(#"\"",#"\"",236),
(#"\\",#"\\",236),
(#"a",#"b",236),
(#"f",#"f",236),
(#"n",#"n",236),
(#"r",#"r",236),
(#"t",#"t",236),
(#"v",#"v",236),
(#"0",#"9",239),
(#"^",#"^",240),
(#"u",#"u",241)], []), ([(#"0",#"9",245)], []), ([(#"\^@",#"\255",236)], []), ([(#"0",#"9",242),
(#"A",#"F",242),
(#"a",#"f",242)], []), ([(#"0",#"9",243),
(#"A",#"F",243),
(#"a",#"f",243)], []), ([(#"0",#"9",244),
(#"A",#"F",244),
(#"a",#"f",244)], []), ([(#"0",#"9",236),
(#"A",#"F",236),
(#"a",#"f",236)], []), ([(#"0",#"9",236)], []), ([(#"!",#"!",53),
(#"#",#"&",53),
(#"*",#"+",53),
(#"-",#"-",53),
(#"/",#"/",53),
(#":",#":",53),
(#"<",#"@",53),
(#"\\",#"\\",53),
(#"^",#"^",53),
(#"`",#"`",53),
(#"|",#"|",53),
(#"~",#"~",53),
(#")",#")",247)], [78]), ([], [75])]
    fun mk yyins = let
        (* current start state *)
        val yyss = ref INITIAL
	fun YYBEGIN ss = (yyss := ss)
	(* current input stream *)
        val yystrm = ref yyins
	(* get one char of input *)
	val yygetc = yyInput.getc
	(* create yytext *)
	fun yymktext(strm) = yyInput.subtract (strm, !yystrm)
        open UserDeclarations
        fun lex 
(yyarg as ()) = let 
     fun continue() = let
            val yylastwasn = yyInput.lastWasNL (!yystrm)
            fun yystuck (yyNO_MATCH) = raise Fail "stuck state"
	      | yystuck (yyMATCH (strm, action, old)) = 
		  action (strm, old)
	    val yypos = yyInput.getpos (!yystrm)
	    val yygetlineNo = yyInput.getlineNo
	    fun yyactsToMatches (strm, [],	  oldMatches) = oldMatches
	      | yyactsToMatches (strm, act::acts, oldMatches) = 
		  yyMATCH (strm, act, yyactsToMatches (strm, acts, oldMatches))
	    fun yygo actTable = 
		(fn (~1, _, oldMatches) => yystuck oldMatches
		  | (curState, strm, oldMatches) => let
		      val (transitions, finals') = Vector.sub (yytable, curState)
		      val finals = map (fn i => Vector.sub (actTable, i)) finals'
		      fun tryfinal() = 
		            yystuck (yyactsToMatches (strm, finals, oldMatches))
		      fun find (c, []) = NONE
			| find (c, (c1, c2, s)::ts) = 
		            if c1 <= c andalso c <= c2 then SOME s
			    else find (c, ts)
		      in case yygetc strm
			  of SOME(c, strm') => 
			       (case find (c, transitions)
				 of NONE => tryfinal()
				  | SOME n => 
				      yygo actTable
					(n, strm', 
					 yyactsToMatches (strm, finals, oldMatches)))
			   | NONE => tryfinal()
		      end)
	    in 
let
fun yyAction0 (strm, lastMatch : yymatch) = (yystrm := strm; (lex()))
fun yyAction1 (strm, lastMatch : yymatch) = (yystrm := strm; (lex()))
fun yyAction2 (strm, lastMatch : yymatch) = (yystrm := strm;
      (pos := !pos + 1; lex()))
fun yyAction3 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.INT(yytext, !pos, !pos))
      end
fun yyAction4 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.INT(yytext, !pos, !pos))
      end
fun yyAction5 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.REAL(yytext, !pos, !pos))
      end
fun yyAction6 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.WORD(yytext, !pos,!pos))
      end
fun yyAction7 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.CHAR(yytext, !pos, !pos))
      end
fun yyAction8 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.STRING(yytext, !pos, !pos))
      end
fun yyAction9 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.EQUALOP(yytext, !pos,!pos))
      end
fun yyAction10 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.TIMES(yytext, !pos,!pos))
      end
fun yyAction11 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.SEMICOLON (yytext, !pos, !pos))
      end
fun yyAction12 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.COMMA(yytext, !pos,!pos))
      end
fun yyAction13 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.DOT (yytext, !pos, !pos))
      end
fun yyAction14 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.ARROW(yytext, !pos,!pos))
      end
fun yyAction15 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.DARROW(yytext, !pos,!pos))
      end
fun yyAction16 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.BAR(yytext, !pos,!pos))
      end
fun yyAction17 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.COLON(yytext, !pos,!pos))
      end
fun yyAction18 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.COLONGT(yytext, !pos,!pos))
      end
fun yyAction19 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.HASH(yytext, !pos,!pos))
      end
fun yyAction20 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.LCURLY(yytext, !pos,!pos))
      end
fun yyAction21 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.RCURLY(yytext, !pos,!pos))
      end
fun yyAction22 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN COMMENT; unmatched_comments := 1;
						 lex()))
fun yyAction23 (strm, lastMatch : yymatch) = (yystrm := strm;
      (inc unmatched_comments; lex()))
fun yyAction24 (strm, lastMatch : yymatch) = (yystrm := strm;
      (dec unmatched_comments; 
						 if (!unmatched_comments) = 0
						 then YYBEGIN INITIAL else (); 
						 lex()))
fun yyAction25 (strm, lastMatch : yymatch) = (yystrm := strm;
      (pos := !pos + 1; lex()))
fun yyAction26 (strm, lastMatch : yymatch) = (yystrm := strm; (lex()))
fun yyAction27 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.LBRACK(yytext, !pos,!pos))
      end
fun yyAction28 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.RBRACK(yytext, !pos,!pos))
      end
fun yyAction29 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.LPAREN(yytext, !pos,!pos))
      end
fun yyAction30 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.RPAREN(yytext, !pos,!pos))
      end
fun yyAction31 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.IF(yytext, !pos,!pos))
      end
fun yyAction32 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.THEN(yytext, !pos,!pos))
      end
fun yyAction33 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.ELSE(yytext, !pos,!pos))
      end
fun yyAction34 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.WHILE(yytext, !pos,!pos))
      end
fun yyAction35 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.DO(yytext, !pos,!pos))
      end
fun yyAction36 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.LET(yytext, !pos,!pos))
      end
fun yyAction37 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.IN(yytext, !pos,!pos))
      end
fun yyAction38 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.END(yytext, !pos,!pos))
      end
fun yyAction39 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.ORELSE(yytext, !pos,!pos))
      end
fun yyAction40 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.ANDALSO(yytext, !pos,!pos))
      end
fun yyAction41 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.HANDLE(yytext, !pos,!pos))
      end
fun yyAction42 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.RAISE(yytext, !pos,!pos))
      end
fun yyAction43 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.EXCEPTION(yytext, !pos,!pos))
      end
fun yyAction44 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.VAL(yytext, !pos, !pos))
      end
fun yyAction45 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.AND(yytext, !pos, !pos))
      end
fun yyAction46 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.FN(yytext, !pos, !pos))
      end
fun yyAction47 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.FUN(yytext, !pos, !pos))
      end
fun yyAction48 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.CASE(yytext, !pos, !pos))
      end
fun yyAction49 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.OF(yytext, !pos, !pos))
      end
fun yyAction50 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.WILD(yytext, !pos, !pos))
      end
fun yyAction51 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.OP(yytext, !pos, !pos))
      end
fun yyAction52 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.REC(yytext, !pos, !pos))
      end
fun yyAction53 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.TYPE(yytext, !pos, !pos))
      end
fun yyAction54 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.DATATYPE(yytext, !pos, !pos))
      end
fun yyAction55 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.ABSTYPE(yytext, !pos, !pos))
      end
fun yyAction56 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.WITH(yytext, !pos, !pos))
      end
fun yyAction57 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.WITHTYPE(yytext, !pos, !pos))
      end
fun yyAction58 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.AS(yytext, !pos, !pos))
      end
fun yyAction59 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.OPEN(yytext, !pos, !pos))
      end
fun yyAction60 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.LOCAL(yytext, !pos, !pos))
      end
fun yyAction61 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.INFIX(yytext, !pos, !pos))
      end
fun yyAction62 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.INFIXR(yytext, !pos, !pos))
      end
fun yyAction63 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.NONFIX(yytext, !pos, !pos))
      end
fun yyAction64 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.STRUCT(yytext, !pos, !pos))
      end
fun yyAction65 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.STRUCTURE(yytext, !pos, !pos))
      end
fun yyAction66 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.SIG(yytext, !pos, !pos))
      end
fun yyAction67 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.SIGNATURE(yytext, !pos, !pos))
      end
fun yyAction68 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.FUNCTOR(yytext, !pos, !pos))
      end
fun yyAction69 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.INCLUDE(yytext, !pos, !pos))
      end
fun yyAction70 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.WHERE(yytext, !pos, !pos))
      end
fun yyAction71 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.EQTYPE(yytext, !pos, !pos))
      end
fun yyAction72 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.SHARING(yytext, !pos, !pos))
      end
fun yyAction73 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.DOTTED_WILDCARD(yytext, !pos, !pos))
      end
fun yyAction74 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.LASSERT(yytext, !pos, !pos))
      end
fun yyAction75 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.RASSERT(yytext, !pos, !pos))
      end
fun yyAction76 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (req (!pos); Tokens.REQUIRES(yytext, !pos, !pos))
      end
fun yyAction77 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (ens (!pos); Tokens.ENSURES(yytext, !pos, !pos))
      end
fun yyAction78 (strm, lastMatch : yymatch) = let
      val oldStrm = !(yystrm)
      fun REJECT () = (yystrm := oldStrm; yystuck(lastMatch))
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (if yytext = ":" orelse
							yytext = "|" orelse
							yytext = "=" orelse
							yytext = "#" then REJECT()
						else Tokens.SYMBOLS(yytext, !pos, !pos))
      end
fun yyAction79 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.QUOTE_ID(yytext, !pos, !pos))
      end
fun yyAction80 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.ID(yytext, !pos, !pos))
      end
fun yyAction81 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (error ("ignoring bad character "^yytext,!pos,!pos); lex())
      end
val yyactTable = Vector.fromList([yyAction0, yyAction1, yyAction2, yyAction3,
  yyAction4, yyAction5, yyAction6, yyAction7, yyAction8, yyAction9, yyAction10,
  yyAction11, yyAction12, yyAction13, yyAction14, yyAction15, yyAction16,
  yyAction17, yyAction18, yyAction19, yyAction20, yyAction21, yyAction22,
  yyAction23, yyAction24, yyAction25, yyAction26, yyAction27, yyAction28,
  yyAction29, yyAction30, yyAction31, yyAction32, yyAction33, yyAction34,
  yyAction35, yyAction36, yyAction37, yyAction38, yyAction39, yyAction40,
  yyAction41, yyAction42, yyAction43, yyAction44, yyAction45, yyAction46,
  yyAction47, yyAction48, yyAction49, yyAction50, yyAction51, yyAction52,
  yyAction53, yyAction54, yyAction55, yyAction56, yyAction57, yyAction58,
  yyAction59, yyAction60, yyAction61, yyAction62, yyAction63, yyAction64,
  yyAction65, yyAction66, yyAction67, yyAction68, yyAction69, yyAction70,
  yyAction71, yyAction72, yyAction73, yyAction74, yyAction75, yyAction76,
  yyAction77, yyAction78, yyAction79, yyAction80, yyAction81])
in
  if yyInput.eof(!(yystrm))
    then UserDeclarations.eof(yyarg)
    else (case (!(yyss))
       of COMMENT => yygo yyactTable (0, !(yystrm), yyNO_MATCH)
        | INITIAL => yygo yyactTable (1, !(yystrm), yyNO_MATCH)
      (* end case *))
end
            end
	  in 
            continue() 	  
	    handle IO.Io{cause, ...} => raise cause
          end
        in 
          lex 
        end
    in
    fun makeLexer yyinputN = mk (yyInput.mkStream yyinputN)
    fun makeLexer' ins = mk (yyInput.mkStream ins)
    end

  end
